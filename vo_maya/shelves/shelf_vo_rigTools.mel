global proc shelf_vo_rigTools () {
    global string $gBuffStr;
    global string $gBuffStr0;
    global string $gBuffStr1;


    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 39
        -height 39
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import vo_maya.core as voc\nreload(voc)" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "import vo_maya.core as voc\nreload(voc)" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "addClip_100.png" 
        -image1 "addClip_100.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import vo_maya.core as voc\nreload(voc)" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Rapid Rig Advanced" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Rapid Rig Advanced" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "RRAdvanced_Icon.png" 
        -image1 "RRAdvanced_Icon.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "RapidRig_Advanced_V2;" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
        -mi "NV Eye Rigger" ( "from vo_maya.core.lib.nv_eyeRig import nv_eye_rigger as nve\n\nreload(nve)" )
        -mip 0
        -mi "RRM" ( "RapidRig_Modular_V2;" )
        -mi "Perseus Face" ( "import os\nimport sys\nsys.path.append('C:/Users/abogoev/Documents/maya/scripts/PerseusRigging2Facial/')\nimport Facial as perseus\nreload(perseus)\nFacialPathPerseus = os.path.abspath(perseus.__file__)\nperseus.perseusrigging(FacialPathPerseus)" )
        -mip 2
        -mi "Perseus Selector" ( "import os\nimport sys\nsys.path.append('C:/Users/abogoev/Documents/maya/scripts/PerseusRigging2Facial/')\nimport Selector as perseusSelector\nreload(perseusSelector)\nSelectorPathPerseus = os.path.abspath(perseusSelector.__file__)\nperseusSelector.perseusRiggingUI(SelectorPathPerseus)" )
        -mip 3
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import cgmToolbox\ncgmToolbox.ui()" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "import cgmToolbox\ncgmToolbox.ui()" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "cgm" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "cgmDefault.png" 
        -image1 "cgmDefault.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import cgmToolbox\ncgmToolbox.ui()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Edit the references for the current scene" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Reference Editor" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "RE" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "menuIconFile.png" 
        -image1 "menuIconFile.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "ReferenceEditor" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
        -mi "Import" ( "Import" )
        -mi "Remove selected namespace" ( "import pymel.core as pm\n\n#target_object = pm.ls(sl=1)[0]\n#remove_object_namespace(target_object)\ndef remove_object_namespace(object):\n    target_namespace = object.namespace()\n    print 'removing namespace :: ' + target_namespace\n    pm.namespace(removeNamespace = target_namespace, mergeNamespaceWithRoot = True)\n\ntarget_object = pm.ls(sl=1)[0]\nremove_object_namespace(target_object)" )
        -mip 1
        -mi "Remove Reference Edits" ( "for ref in pm.listReferences():\n    ref.unload()\n    ref.clean()\n    ref.load()" )
        -mip 2
        -mi "Import References" ( "#import all references without namespaces" )
        -mip 3
        -mi "Export Selection" ( "ExportSelection" )
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Create a Joint on selected edge loop" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Joint on edge loop" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "JCL" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "cluster.png" 
        -image1 "cluster.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "\nimport vo_maya.core as voc\nreload(voc)\n\nvoc.vo_shelfWrapper.object_at_select_verts(name='joint_00', objType = 'joint')" 
        -sourceType "python" 
        -doubleClickCommand "import pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\n\nuf.object_on_pivot(objType = 'joint')\n" 
        -commandRepeatable 1
        -flat 1
        -mi "joint on cluster" ( "\nimport vo_maya.core as voc\nreload(voc)\n\nvoc.vo_shelfWrapper.object_at_select_verts(name='joint_00', objType = 'joint')" )
        -mip 0
        -mi "Joint on pivot" ( "\nimport vo_maya.core as voc\nreload(voc)\n\nvoc.vo_general.object_on_pivot(objType = 'joint')" )
        -mip 1
        -mi "locator on cluster" ( "\nimport vo_maya.core as voc\nreload(voc)\n\nvoc.vo_shelfWrapper.object_at_select_verts(name='loc_00', objType = 'locator')" )
        -mip 2
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Create locator on target" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Locator" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "LT" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "locator.png" 
        -image1 "locator.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "# ab_Loc2B---------------------------------\n#place a locator on object location\nimport pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\n\nlocator_target_list = pm.ls(sl=1)\nlocator_list = []\n\nif len(locator_target_list):\n    \n    for locator_target in locator_target_list:\n        locator_name = str(locator_target) + '_location'\n        print(locator_name)\n        locator_object = uf.nest_transform(name = locator_name, action = 'child', target = locator_target, transformObj = 'locator', transformRadius = 1.0)\n        pm.parent(locator_object, world = True)\n        locator_list.append(locator_object)\nelse:\n    \n    locator_list.append(pm.spaceLocator(relative = True))\npm.select(locator_list, replace = True)" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
        -mi "Locator on Grid" ( "#place a locator on origin\nimport pymel.core as pm\n\npm.spaceLocator(relative = True)" )
        -mip 0
        -mi "Locator on selected" ( "# ab_Loc2B---------------------------------\n#place a locator on object location\nimport pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\n\nlocator_target_list = pm.ls(sl=1)\nlocator_list = []\n\nfor locator_target in locator_target_list:\n    \n    locator_name = str(locator_target) + '_location'\n    print(locator_name)\n    locator_object = uf.nest_transform(name = locator_name, action = 'child', target = locator_target, transformObj = 'locator', transformRadius = 1.0)\n    pm.parent(locator_object, world = True)\n    locator_list.append(locator_object)\n\npm.select(locator_list, replace = True)" )
        -mip 1
        -mi "Locator Parented to selected" ( "# ab_Loc2B---------------------------------\n#place a locator on object location\nimport pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\n\nlocator_target_list = pm.ls(sl=1)\nlocator_list = []\n\nfor locator_target in locator_target_list:\n    \n    locator_name = str(locator_target) + '_location'\n    print(locator_name)\n    locator_object = uf.nest_transform(name = locator_name, action = 'child', target = locator_target, transformObj = 'locator', transformRadius = 1.0)\n    pm.parent(locator_object, locator_target)\n    locator_list.append(locator_object)\n\npm.select(locator_list, replace = True)" )
        -mip 2
        -mi "Locator between selected objects" ( "import vo_usefulFunctions as uf\nreload(uf)\nimport pymel.core as pm\n\nuf.loc_average(pm.ls(sl=1))" )
        -mip 3
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Click to place joint, click on existing joint to add to skeleton, click/drag to position joint" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Create Joints" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "JT" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "kinJoint.png" 
        -image1 "kinJoint.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "# joint on transform\nimport pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\n\njoint_target_list = pm.ls(sl=1)\njoints = []\nif len(joint_target_list):\n    for joint_target in joint_target_list:\n        \n        joint_name = str(joint_target) + '_JNT'\n        current_joint = uf.create_object(objName = joint_name, objType = 'joint', radius = 1.0)\n        pm.matchTransform(current_joint, joint_target)\n        joints.append(current_joint)\nelse:\n    current_joint = uf.create_object(objName = 'joint_00', objType = 'joint', radius = 1.0)\n    joints.append(current_joint)\npm.select(joints, replace = True)\n" 
        -sourceType "python" 
        -doubleClickCommand "JointTool" 
        -commandRepeatable 1
        -flat 1
        -mi "(incomplete) mirror joint position" ( "import pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\n\ntarget_list = pm.ls(sl=1)\nlocator_list = []\n\nfor target in target_list:\n\tif '_L_' in str(mirror_object):\n\t\tmirror_name = str(mirror_object).replace(['_L_', '_R_'])\n\t\tcmds.select(mirror_object)\n\t\tcmds.mirrorJoint(mirrorYZ = True, mirrorBehavior = True, sr = ['_L_', '_R_'])\n\telse:\n\t\tmirror_name = str(mirror_object).replace(['_R_', '_L_'])\n\tmirror_object = pm.ls(mirror_name)[0]\n    mirror_target = uf.create_object(objName = str(mirror_object)+'_mirror', objType = 'joint')\n\tpm.matchTransform(mirror_target, target)\n    if pm.objExists(mirror_object):\n        mirror_group = uf.nest_transform(name = str(mirror_object)+'_mirror_offset', action = 'parent', objType = 'group'_\n    else:\n\t\tpm.duplicate(target)\n        mirror_group = uf.nest_transform(name = str(mirror_object)+'_mirror_offset', action = 'parent', objType = 'group'_\n\t\tpm.scale([-1,1,1])" )
        -mip 0
        -mi "--locator?" ( "# Joint on target\n#place a joint on selected transforms\nimport pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\n\nlocator_target_list = pm.ls(sl=1)\nlocator_list = []\n\nfor locator_target in locator_target_list:\n    \n    locator_name = str(locator_target) + '_location'\n    print(locator_name)\n    locator_object = uf.nest_transform(name = locator_name, action = 'child', target = locator_target, transformObj = 'locator', transformRadius = 1.0)\n    pm.parent(locator_object, locator_target)\n    locator_list.append(locator_object)\n\npm.select(locator_list, replace = True)" )
        -mip 1
        -mi "Joint Tool" ( "JointTool" )
        -mi "Make attach joint" ( "import pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\n\nfor target in pm.ls(sl=1):\n    name = str(target)+'_attach'\n    attach_joint = pm.duplicate(target)[0]\n    attach_joint.rename(name)\n    target|attach_joint\n    children = attach_joint.getChildren(children = True, type = 'transform')\n    pm.delete(children)\n    if '_L_' in str(target):\n        #attach_joint.rotate = (90,0,-90)\n        attach_joint.rotateX.set(90)\n        attach_joint.rotateZ.set(-90)\n        attach_joint.ty.set(-4.543)\n    else:\n        attach_joint.rotateX.set(90)\n        attach_joint.rotateZ.set(-90)\n        attach_joint.translateY.set(4.543)\n    pm.makeIdentity(attach_joint, rotate = True, scale = False, translate = False, apply = True)\n    attach_joint.radius.set(1)" )
        -mip 3
        -mi "WIP - replace joint connections" ( "import pymel.core as pm\n\n\n#   ====    replace connections    ====    #\n#\n# or just shortcut and replace expected conenctionjs to skinClustersend \n\nsource_joint = pm.ls(sl=1)[0]\ntarget_joint = pm.ls(sl=1)[1]\n\ndef replace_connections(source,target):\n    #CHECK IF TYPES MATCH\n    if source.type() == 'joint' and target.type() == 'joint':\n        #find a way to get all clusters current joint connects to\n        clusters = list(set(pm.ls(source.outputs(type = 'skinCluster'), flatten = True)) - set(pm.ls(target.outputs(type = 'skinCluster'), flatten = True)))\n        \n        \n        for target_cluster in clusters:\n            #add influence to every cluster\n            target_cluster.addInfluence(target, lw = True, wt = 0)\n            pass\n\n        #REPLACE CONNECTIONS\n        pm.nodeCast(source, target)\n        #pm.skinCluster\n        for target_cluster in clusters:\n            #add influence to every cluster\n            target_cluster.removeInfluence(source, lw = True, wt = 0)\n            pass\n        return True\n    else:\n        return False\n\n\nreplace_connections(source = source_joint, target = target_joint)" )
        -mip 4
        -mi "Select Joints in Hierarchy" ( "import pymel.core as pm\npm.select(hierarchy = True)\npm.select(pm.ls(type = 'joint', objectsOnly=True, selection = True))" )
        -mip 5
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Select a joint to mirror" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Mirror Joints" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "kinMirrorJoint_S.png" 
        -image1 "kinMirrorJoint_S.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import maya.cmds as cmds\n\nobjectList= []\nobjectList = cmds.ls (sl = True)\n\n\n#for each selected item check if parent == 'world'\n#if it is, do the mirror\n#if it isn't, dupe it, parent dupe to worldspace, mirror dupe and rename it manually\n#delete dupe\n\n\nfor item in objectList:\n\tif '_L_' in str(item):\n\t\tcmds.select(item)\n\t\tcmds.mirrorJoint(mirrorYZ = True, mirrorBehavior = True, sr = ['_L_', '_R_'])\n\telse:\n\t\tcmds.select(item)\n\t\tcmds.mirrorJoint(mirrorYZ = True, mirrorBehavior = True, sr = ['_R_', '_L_'])" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
        -mi "(incomplete) joint labeling" ( "import pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\n\njoint_list = pm.ls(sl=1)\n#uf.prompt_string(promptTitle = '', promptMessage = 'enter '\n\n\nfor joint_object in joint_list:\n    #try or check for attr\n    try:\n        pm.addAttr(longName = 'rigSide', type = 'string')\n\t\t#this doesn't seem any better than existing joint labeling except being legible\n    except:\n        pass\n    if '_R_' in str(joint_object):\n        side_value = 'right'\n    elif '_L_' in str(joint_object):\n        side_value = 'left'\n    else:\n        side_value = 'center'\n    joint_object.setAttr('rigSide', 'center')\n    \n    #split up name\n    if joint_object.hasAttr('jointIdentity'):\n        joint_object.setAttr('jointIdentity', identity_value)\n    else:\n        pm.addAttr(longName = 'jointIdentity', type = 'string')\n        #or use existing setAttr -type \"string\" mesh:joint51.otherType \"hair\";\n    \npm.addAttr(longName = 'jointSkin', attributeType = 'message')" )
        -mip 0
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Delete non-deformer history" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "History" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "NdHist" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "menuIconEdit.png" 
        -image1 "menuIconEdit.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "BakeNonDefHistory" 
        -sourceType "mel" 
        -doubleClickCommand "DeleteHistory" 
        -commandRepeatable 1
        -flat 1
        -mi "Delete Non Deformer History" ( "BakeNonDefHistory" )
        -mi "Delete History" ( "DeleteHistory" )
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Select an object(s)" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Center Pivot" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "CP" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "menuIconModify.png" 
        -image1 "menuIconModify.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "CenterPivot" 
        -sourceType "mel" 
        -doubleClickCommand "import pymel.core as pm\n\ntransform_list = pm.ls(sl=1)\n\nfor transform in transform_list:\n    original_location = pm.xform(transform, q=True, worldSpace = True, relative=True, rotatePivot=True)\n    print (original_location)\n    original_rotation = pm.xform(transform, query = True, rotation = True, worldSpace = True)\n    transform_parent = transform.getParent()\n    pm.parent(transform, world = True)\n    pm.move (rotatePivotRelative = True, x=0, y=0, z=0)\n    pm.makeIdentity(transform, apply = True, translate = True, rotate = False, scale = True)\n    pm.xform(transform, ws=True, translation= original_location)" 
        -commandRepeatable 1
        -flat 1
        -mi "TRNS" ( "import pymel.core as pm\n\ntransform_list = pm.ls(sl=1)\n\nfor transform in transform_list:\n    original_location = pm.xform(transform, q=True, worldSpace = True, relative=True, rotatePivot=True)\n    print (original_location)\n    original_rotation = pm.xform(transform, query = True, rotation = True, worldSpace = True)\n    transform_parent = transform.getParent()\n    pm.parent(transform, world = True)\n    pm.move (rotatePivotRelative = True, x=0, y=0, z=0)\n    pm.makeIdentity(transform, apply = True, translate = True, rotate = False, scale = True)\n    pm.xform(transform, ws=True, translation= original_location)" )
        -mip 0
        -mi "Copy pivot A to pivot B" ( "import pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\n\n#Copy 1st selecton's pivot to 2nd selection\nuf.match_pivot(source = pm.ls(sl=1)[0], target = pm.ls(sl=1)[1])" )
        -mip 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Select an object(s)" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Freeze Transformations" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "FT" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "menuIconModify.png" 
        -image1 "menuIconModify.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "FreezeTransformations" 
        -sourceType "mel" 
        -doubleClickCommand "FreezeTransformationsOptions" 
        -commandRepeatable 1
        -flat 1
        -mi "Freeze TRS" ( "import pymel.core as pm\n\npm.makeIdentity(rotate = True, scale = True, translate = True, apply = True)" )
        -mip 0
        -mi "Freeze Translate" ( "import pymel.core as pm\n\npm.makeIdentity(rotate = False, scale = False, translate = True, apply = True)" )
        -mip 1
        -mi "Freeze Rotate" ( "import pymel.core as pm\n\npm.makeIdentity(rotate = True, scale = False, translate = False, apply = True)" )
        -mip 2
        -mi "Freeze TS" ( "import pymel.core as pm\n\npm.makeIdentity(rotate = False, scale = True, translate = True, apply = True)" )
        -mip 3
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Parent chain" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "import pymel.core as pm\n\n\nchain_list = pm.ls(sl=1)\nsegment_count..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "chain" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import pymel.core as pm\n\nchain_list = pm.ls(sl=1)\nsegment_count = len(chain_list)-1\nprint segment_count\n\nfor segment_index in range(0,segment_count):\n    link = chain_list[segment_index]\n    next_index = segment_index + 1\n    pm.parent(chain_list[segment_index],chain_list[next_index])" 
        -sourceType "python" 
        -doubleClickCommand "import pymel.core as pm\n\npm.select(hierarchy = True)\npm.parent(world = True)" 
        -commandRepeatable 1
        -flat 1
        -mi "Parent Chain" ( "import pymel.core as pm\n\nchain_list = pm.ls(sl=1)\nsegment_count = len(chain_list)-1\nprint segment_count\n\nfor segment_index in range(0,segment_count):\n    link = chain_list[segment_index]\n    next_index = segment_index + 1\n    pm.parent(chain_list[segment_index],chain_list[next_index])" )
        -mip 0
        -mi "Parent Chain Reverse" ( "import pymel.core as pm\n\nchain_list = pm.ls(sl=1)\n#chain_list = reversed(chain_list)\nsegment_count = len(chain_list)-1\nprint segment_count\n\nfor segment_index in range(segment_count,0, -1):\n    link = chain_list[segment_index]\n    next_index = segment_index - 1\n    pm.parent(chain_list[segment_index],chain_list[next_index])" )
        -mip 1
        -mi "Unparent chain" ( "import pymel.core as pm\n\npm.select(hierarchy = True)\npm.parent(world = True)" )
        -mip 2
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Create simple control curve with one offset." 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Simple Control" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "CTL" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "circle.png" 
        -image1 "circle.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "#pController\nimport pymel.core as pm\nimport rigTools\nreload(rigTools.vo_controls)\n\nobject_list= pm.ls(sl = True)\ncontrol_list = []\n\nfor item in object_list:\n\t#prompt string\n    item_name = item.stripNamespace()\n    current_control = rigTools.vo_controls.pControl(target=item, name = item_name)\n    print('control object = ' +str(current_control))\n    control_object = current_control.control_object\n    #insert offset\n    control_list.append(control_object)\n\npm.select(control_list)" 
        -sourceType "python" 
        -doubleClickCommand "CreateNURBSCircleOptions" 
        -commandRepeatable 1
        -flat 1
        -mi "Chain Existing" ( "import pymel.core as pm\nimport rigTools\nreload(rigTools.vo_controls)\n\ncontrol_list= pm.ls(sl = True)\nrigTools.vo_controls.chain_controls(control_list)" )
        -mip 0
        -mi "CTL chain" ( "#pController\nimport pymel.core as pm\nimport rigTools\nreload(rigTools.vo_controls)\nimport vo_usefulFunctions as uf\nreload(uf)\n\nreplace_string = uf.prompt_string(promptTitle = 'Replacement String', promptMessage = 'Enter string to swap in for instances of \"Skel\"')\n\nobject_list= pm.ls(sl = True)\ncontrol_list = []\n\nfor item in object_list:\n\t#prompt string\n    item_name = item.stripNamespace()\n    if 'Skel' in item_name:\n        item_name = item_name.replace('Skel',replace_string)\n    current_control = rigTools.vo_controls.pControl(target=item, name = item_name)\n    print('control object = ' +str(current_control))\n    control_object = current_control.control_object\n    #insert offset\n    control_list.append(control_object)\n\nrigTools.vo_controls.chain_controls(control_list)\n\npm.select(control_list)" )
        -mip 1
        -mi "Custom Name CTL" ( "#pController\nimport pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\nimport rigTools\nreload(rigTools.vo_controls)\n\nobject_list= pm.ls(sl = True)\ncontrol_list = []\n\nfor item in object_list:\n\t#prompt string\n    item_name = item.stripNamespace()\n    control_string = uf.prompt_string(promptTitle = 'Input Name String', promptMessage = 'Enter string to name for >  < controller')\n    current_control = rigTools.vo_controls.pControl(target=item, name = control_string)\n    print('control object = ' +str(current_control))\n    control_object = current_control.control_object\n    #insert offset\n    control_list.append(control_object)\n\npm.select(control_list)" )
        -mip 2
        -mi "Micro CTL" ( "#micro offset proc\n#PURPOSE        create an offset control that takes over target control's constraint targets\n#PROCEDR        get target\n#PRESUMP        selecting a control\nimport pymel.core as pm\nimport rigTools\nreload(rigTools.vo_controls)\nimport vo_usefulFunctions as uf\nreload(uf)\n\nfor item in pm.ls(sl=1):\n    #connections = item.listConnections()\n    child_target = uf.meta_traverse(source = item, relation = 'child')\n    #set group_parent\n    group_offset = str(child_target).replace('_CTL','_GRP')\n    #clear constraints\n    pm.delete(child_target, constraints = 1)\n    micro_control = rigTools.vo_controls.pControl(target=child_target, name = str(item).replace('_CTL','_micro'),line_width = 1.0, control_type = 'microController')\n    #link to existing control\n    rigTools.vo_controls.chain_controls(item,micro_control.control_object)\n    control_list.append(micro_control.control_object)" )
        -mip 3
        -mi "Attach Control" ( "import pymel.core as pm\nimport rigTools\nreload(rigTools.vo_controls)\nimport vo_usefulFunctions as uf\nreload(uf)\n\ntargets = pm.ls(sl=1)\nmicro_controls = []\nmain_controls = []\n\n#attach proc\n#PURPOSE        create an offset control that takes over target control's constraint targets\n#PROCEDR        get target\n#PRESUMP        selecting a control\nfor item in targets:\n\t#prompt string\n    item_name = item.stripNamespace()\n    current_control = rigTools.vo_controls.pControl(target=item, name = item_name, scale = 5.0, line_width = 2.0)   #circle centerX = 2.4, y in thumb direction\n    print('control object = ' +str(current_control))\n    #control = current_control.control_object\n    #insert offset\n    offset_name = str(current_control.control_object).replace('_CTL', '_OST')\n    offset_object = uf.nest_transform(name = offset_name, action = 'parent', target = current_control.control_object, transformObj = 'group')\n    main_controls.append(current_control.control_object)\n    #get target parent\n    target_parent = item.listRelatives(parent=True)[0]\n    #build constraint from target parent to current_control\n    tr_constraint = pm.parentConstraint (target_parent,current_control.root_offset, mo = 1, weight = 1)\n    tr_constraint.setAttr('interpType', 2)\n    #s_constraint =\n    pm.scaleConstraint(target_parent,current_control.root_offset, mo = True)\n\n\n\n#micro offset proc\n#PURPOSE        create an offset control that takes over target control's constraint targets\n#PROCEDR        get target\n#PRESUMP        selecting a control\nfor item in main_controls:\n    #connections = item.listConnections()\n    child_target = uf.meta_traverse(source = item, relation = 'child')\n    #set group_parent\n    group_offset = str(child_target).replace('_CTL','_GRP')\n    #clear constraints\n    pm.delete(child_target, constraints = 1)\n    micro_control = rigTools.vo_controls.pControl(target=child_target, name = str(item).replace('_CTL','_micro'), scale = 2.5, line_width = 1.0, control_type = 'microController')\n    #link to existing control\n    links = item,micro_control.control_object\n    rigTools.vo_controls.chain_controls(links)\n    micro_controls.append(micro_control.control_object)" )
        -mip 4
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "make offsets of various kinds" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "\n# control prep\nimport pymel.core as pm\nimport vo_usefulFunctions ..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "OST" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "# transform offset parent\nimport pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\n\ncontrol_target_list = pm.ls(sl=1)\n\nfor control_target in control_target_list:\n    if '_CTL' in str(control_target):\n        offset_name = str(control_target).replace('_CTL', '_OST')\n    else:\n        offset_name = str(control_target) + '_OST'\n    offset_object = uf.nest_transform(name = offset_name, action = 'parent', target = control_target, transformObj = 'group')\npm.select(control_target_list, replace = True)" 
        -sourceType "python" 
        -doubleClickCommand "# transform offset + group\nimport pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\n\ncontrol_target_list = pm.ls(sl=1)\n\nfor control_target in control_target_list:\n    if '_CTL' in str(control_target):\n        offset_name = str(control_target).replace('_CTL', '_OST')\n    else:\n        offset_name = str(control_target) + '_OST'\n    group_name = offset_name.replace('_OST', '_GRP')\n    offset_object = uf.nest_transform(name = offset_name, action = 'parent', target = control_target, transformObj = 'group')\n    group_object = uf.nest_transform(name = group_name, action = 'parent', target = offset_object, transformObj = 'group')\npm.select(control_target_list, replace = True)" 
        -commandRepeatable 1
        -flat 1
        -mi "string Offset parent" ( "import pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\n####\t========\t\tNEED TO MAKE A MENU FOR THIS SHIT\t\t========\t####\n\n\ncontrol_target_list = pm.ls(sl=1)\noffset_list = []\noffset_string = uf.prompt_string(promptTitle = 'Offset String', promptMessage = 'Enter string to use for offset')\n\nfor control_target in control_target_list:\n    if 'CTL' in str(control_target):\n        offset_name = str(control_target).replace('CTL', offset_string)\n    else:\n        offset_name = str(control_target) + offset_string\n    offset_object = uf.nest_transform(name = offset_name, action = 'parent', target = control_target, transformObj = 'group')\n    offset_list.append(offset_object)\n\npm.select(offset_list, replace = True)" )
        -mip 0
        -mi "OST parent" ( "# transform offset parent\nimport pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\n\ncontrol_target_list = pm.ls(sl=1)\n\nfor control_target in control_target_list:\n    if '_CTL' in str(control_target):\n        offset_name = str(control_target).replace('_CTL', '_OST')\n    else:\n        offset_name = str(control_target) + '_OST'\n    offset_object = uf.nest_transform(name = offset_name, action = 'parent', target = control_target, transformObj = 'group')\npm.select(control_target_list, replace = True)" )
        -mip 1
        -mi "OST child" ( "# transform offset child\nimport pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\n\ncontrol_target_list = pm.ls(sl=1)\n\nfor control_target in control_target_list:\n    if '_CTL' in str(control_target):\n        offset_name = str(control_target).replace('_CTL', '_OST')\n    else:\n        offset_name = str(control_target) + '_OST'\n    offset_object = uf.nest_transform(name = offset_name, action = 'child', target = control_target, transformObj = 'group')\npm.select(control_target_list, replace = True)" )
        -mip 2
        -mi "OST child, adopt children" ( "#offset is insterted between transform and its children\nimport pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\n\ncontrol_target_list = pm.ls(sl=1)\n\nfor control_target in control_target_list:\n    if '_CTL' in str(control_target):\n        offset_name = str(control_target).replace('_CTL', '_OST')\n    else:\n        offset_name = str(control_target) + '_OST'\n    offset_object = uf.nest_transform(name = offset_name, action = 'adopt', target = control_target, transformObj = 'group')\npm.select(control_target_list, replace = True)" )
        -mip 3
        -mi "Parent GRP + OST" ( "# transform offset + group\nimport pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\n\ncontrol_target_list = pm.ls(sl=1)\n\nfor control_target in control_target_list:\n    if '_CTL' in str(control_target):\n        offset_name = str(control_target).replace('_CTL', '_OST')\n    else:\n        offset_name = str(control_target) + '_OST'\n    group_name = offset_name.replace('_OST', '_GRP')\n    offset_object = uf.nest_transform(name = offset_name, action = 'parent', target = control_target, transformObj = 'group')\n    group_object = uf.nest_transform(name = group_name, action = 'parent', target = offset_object, transformObj = 'group')\npm.select(control_target_list, replace = True)" )
        -mip 4
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Create pivot guide on selected objects." 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Pivot" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "piv" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "sphere.png" 
        -image1 "sphere.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "\nimport pymel.core as pm\nimport rigTools.vo_faceTools as fat\nreload(fat)\n\nproxy_target_list = pm.ls(sl=1)\nfor current_target in proxy_target_list:\n    current_name = 'pivot_' + str(current_target)\n    fat.make_proxy_pivot(name = current_name, target = current_target)" 
        -sourceType "python" 
        -doubleClickCommand "CreateNURBSSphereOptions" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "parent shape" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "pm.parent(shape=1,r=1)" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "shape" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "pm.parent(shape=1,r=1)" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
        -mi "Move Shape" ( "pm.parent(shape=1,r=0)" )
        -mip 0
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Curve creator UI" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Bezier Curve Tool" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "UI" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "curveBezier.png" 
        -image1 "curveBezier.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import curveRecreator\n\ncurveRecreator.StartUI()" 
        -sourceType "python" 
        -doubleClickCommand "CreateBezierCurveToolOptions" 
        -commandRepeatable 1
        -flat 1
        -mi "Custom Lind Width" ( "import pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\ntarget_list = pm.ls(sl=1)\n\ninput_width = uf.prompt_string(promptTitle = 'Line Width', promptMessage = 'Input Line Width Value')\ncustom_width = float(input_width)\n\nfor target in target_list:\n    target.setAttr('lineWidth', custom_width)\n" )
        -mip 0
        -mi "Line Width 1" ( "\nimport pymel.core as pm\ntarget_list = pm.ls(sl=1)\n\nfor target in target_list:\n    target.setAttr('lineWidth', 1)" )
        -mip 1
        -mi "Line Width 1.5" ( "\nimport pymel.core as pm\ntarget_list = pm.ls(sl=1)\n\nfor target in target_list:\n    target.setAttr('lineWidth', 1.5)" )
        -mip 2
        -mi "Line Width 2" ( "\nimport pymel.core as pm\ntarget_list = pm.ls(sl=1)\n\nfor target in target_list:\n    target.setAttr('lineWidth', 2)" )
        -mip 3
        -mi "+ 0.2" ( "import pymel.core as pm\ntarget_list = pm.ls(sl=1)\n\nfor target in target_list:\n    current_width = target.getAttr('lineWidth')\n    print current_width\n    current_width = current_width + 0.2\n    target.setAttr('lineWidth', current_width)" )
        -mip 4
        -mi "- 0.2" ( "import pymel.core as pm\ntarget_list = pm.ls(sl=1)\n\nfor target in target_list:\n    current_width = target.getAttr('lineWidth')\n    print current_width\n    current_width = current_width - 0.2\n    target.setAttr('lineWidth', current_width)" )
        -mip 5
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "SkinTools UI" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Skin Tools" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "ui" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "exportSmoothSkin.png" 
        -image1 "exportSmoothSkin.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "from vo_maya.core.lib.skinningTool import SkinningToolsUI\n\nSkinningToolsUI.startUI()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Smooth bind skin options" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "skinClusterDialog" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "skin" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "goToBindPose.png" 
        -image1 "goToBindPose.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "SmoothBindSkinOptions" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
        -mi "Unbind Skin" ( "DetachSkin" )
        -mi "Unbind Skin Options" ( "DetachSkinOptions" )
        -mi "Bind Pose" ( "GoToBindPose" )
        -mi "Mirror Skinweights" ( "MirrorSkinWeightsOptions" )
        -mi "List Influence Objects" ( "import pymel.core as pm\n\ndef list_influences(mesh):\n\t#test_thing.listHistory(type = 'skinCluster')\n\ttarget_cluster = mesh.history(type = 'skinCluster')\n\t\n\tinfluence_list = pm.skinCluster(target_cluster,query=True,inf=True)\n\tinfluence_return_list = []\n\tfor item in influence_list:\n\t\tinfluence_return_list.append(str(item))\n\t\t#print(item)\n\treturn influence_return_list\n\nprint(list_influences(pm.ls(sl=1)[0]))" )
        -mip 4
        -mi "Select Influence Ojbects" ( "import pymel.core as pm\n\ndef list_influences(mesh):\n\t#test_thing.listHistory(type = 'skinCluster')\n\ttarget_cluster = mesh.history(type = 'skinCluster')\n\t\n\tinfluence_list = pm.skinCluster(target_cluster,query=True,inf=True)\n\tinfluence_return_list = []\n\tfor item in influence_list:\n\t\tinfluence_return_list.append(str(item))\n\t\t#print(item)\n\treturn influence_return_list\n\npm.select(list_influences(pm.ls(sl=1)[0]), replace = True)" )
        -mip 5
        -mi "Add Influence Object" ( "AddInfluence" )
        -mi "Remove Influence Object" ( "RemoveInfluence" )
        -mi "WIP - Replace Influence(proto)" ( "import pymel.core as pm\n\n\n#   ====    replace connections    ====    #\n#\n# or just shortcut and replace expected conenctionjs to skinCluster\n\nsource_joint = pm.ls(sl=1)[0]\ntarget_joint = pm.ls(sl=1)[1]\n\ndef replace_connections(source,target):\n    #CHECK IF TYPES MATCH\n    if source.type() == 'joint' and target.type() == 'joint':\n        #find a way to get all clusters current joint connects to\n        clusters = list(set(pm.ls(source.outputs(type = 'skinCluster'), flatten = True)) - set(pm.ls(target.outputs(type = 'skinCluster'), flatten = True)))\n        \n        \n        for target_cluster in clusters:\n            #add influence to every cluster\n            target_cluster.addInfluence(target, lw = True, wt = 0)\n            pass\n\n        #REPLACE CONNECTIONS\n        pm.nodeCast(source, target)\n        #pm.skinCluster\n        for target_cluster in clusters:\n            #add influence to every cluster\n            target_cluster.removeInfluence(source, lw = True, wt = 0)\n            pass\n        return True\n    else:\n        return False\n\n\nreplace_connections(source = source_joint, target = target_joint)" )
        -mip 8
        -mi "Remove Unused Influences" ( "removeUnusedInfluences" )
        -mi "WIP auto copy skinweights" ( "\n#auto copy skinweights\n\nimport pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\n\nskeleton = pm.ls(sl=1)\nsource_mesh = pm.ls(sl=1)[0]\n#skeleton = uf.list_influences(mesh)        #for later use\n\nselection = pm.ls(sl=1)\n\n\nfor mesh in selection:\n    pm.select(mesh,skeleton, replace = True)\n    target_cluster = pm.skinCluster(toSelectedBones = True, bindMethod = 0, normalizeWeights = 1, weightDistribution = 1, maximumInfluences = 4, obeyMaxInfluences = True, skinMethod = 0, smoothWeights = 0.8, dropoffRate = 2, removeUnusedInfluence = False)\n    source_cluster = source_mesh.history(type = 'skinCluster')[0]\n    #pm.copySkinWeights(sourceSkin = source_cluster,destinationSkin = target_cluster, noMirror = True, surfaceAssociation = 'rayCast', influenceAssociation = ('label'), normalize = True)\n    #,'oneToOne','name'\n    #copySkinWeights  -noMirror -surfaceAssociation rayCast -influenceAssociation label -influenceAssociation oneToOne -influenceAssociation name -normalize;\n\n    #pm.mel.removeUnusedInfluences(mesh)\n    \n    #cmds.file(export_path, exportSelected=True, type=\"FBX export\")\n    pass\n\n\n\npm.skinCluster(mesh, toSelectedBones = True, bindMethod = 0, normalizeWeights = 1, weightDistribution = 1, maximumInfluences = 4, obeyMaxInfluences = True, skinMethod = 1, smoothWeights = 0.8, dropoffRate = 2, removeUnusedInfluence = False)\n\n\n\n\npm.mel.removeUnusedInfluences(mesh)\n" )
        -mip 10
        -mi "Combine Skinned Meshes" ( "\n####\n#\n#       GEOMETRY MANIPULATION\n#\n####\n\nimport maya.cmds as cmds\nimport maya.mel as mel\n\n\ndef CombineSkinnedMeshProc( *args):\n    \n    selection = cmds.ls(sl=True)\n    joint_list = []\n    if(len(selection) == 0):\n        raise TypeError ('Please Select at least two skinned Meshes')\n\t\t\n    elif(len(selection) == 1):\n        raise TypeError ('Please Select at least two skinned Meshes')\t\n\n    textField_obj = cmds.textField( textFieldName, query=True, text=True )\n    \n    if(len(textField_obj) == 0):\n        raise TypeError ('Please Assign a Name')\n           \n    if \" \" in textField_obj:\n        raise TypeError(\"Warning: you are using illegal characters for the name\")\n          \n    if cmds.objExists(textField_obj):\n           raise TypeError(\"Warning: this name is already in use\")\n    \n             \n    for item in selection:       \n        findSkinStart = mel.eval('findRelatedSkinCluster ' + item)\n        \n        if cmds.objExists (findSkinStart):\n            print findSkinStart\n                 \n        else:\n            raise TypeError(\"Please Select at least two skinned Meshes \") \n            \n        matrix_array = cmds.getAttr(findSkinStart + \".matrix\", mi = True)\n    \n        for i in matrix_array:\n            list = cmds.connectionInfo(findSkinStart + \".matrix[\" + str(i) + \"]\", sourceFromDestination = True)\n            joint = list.split(\".\")\n            joint_list.append(joint[0])         \n                    \n    if (len(selection) > 0):\n            print selection\n            for i in range(1):\n                duplicateObj = cmds.duplicate (selection)\n                createGrp = cmds.group (duplicateObj)        \n                combine = cmds.polyUnite (createGrp, name = textField_obj)\n                deleteHistory = cmds.delete (combine, ch=True)\n                deleteGrp = cmds.select (cmds.delete (createGrp))\n                cmds.textField( textFieldName, e=True, text='')   \n                newskin = cmds.skinCluster(joint_list,textField_obj, n=textField_obj + \"_SKC\")\n                newSelect = cmds.select (joint_list, selection, textField_obj, add= True )\n                transfer = cmds.copySkinWeights (nm=True, sa =\"closestPoint\", ia =\"closestJoint\")\n                delete = cmds.delete (selection)\n                selectnewobj = cmds.select (textField_obj)\n                cleanSkinEnd = mel.eval('removeUnusedInfluences ')\n             \n                \n                deselect = cmds.select (cl=True)\n                \n              \ndef SeparateSkinnedMeshProc( *args):\n    \n    selection = cmds.ls(sl=True)\n    \n    if(len(selection) == 0):\n        raise TypeError ('Please Select a Skinned Mesh')\n\t\t\n    elif(len(selection) > 1):\n        raise TypeError ('Please Select only one Skinned Mesh to separate')\t\n\n    textField_obj = cmds.textField( textFieldName, query=True, text=True )\n    \n    if(len(textField_obj) == 0):\n        raise TypeError ('Please Assign a Name')\n    \n    if \" \" in textField_obj:\n        raise TypeError(\"Warning: you are using illegal characters for the name\")\n        \n    if cmds.objExists(textField_obj):\n           raise TypeError(\"Warning: this name is already in use\")  \n    \n    \n    for item in selection:       \n        findSkinStart = mel.eval('findRelatedSkinCluster ' + item)\n        \n        if cmds.objExists (findSkinStart):\n            print findSkinStart\n                 \n        else:\n            raise TypeError(\"Please Select a Skinned Mesh \")         \n    \n    if len (selection) > 0:\n            print selection\n            for i in range(1):\n                duplicateObj = cmds.duplicate (selection, name = textField_obj)\n                     \n                separate = cmds.polySeparate (duplicateObj, name = textField_obj + \"NewSkin*\", ch=True)\n                deleteHistory = cmds.delete (separate, ch=True)\n\n                \n                deselect01 = cmds.select (cl=True)\n                selectnewmeshes = cmds.select( textField_obj, hi=True)\n                deselGrp = cmds.select(textField_obj, d=True)\n                givenlist = cmds.ls (sl=True)\n                mesh = givenlist\n                \n                for index in range(len(mesh)):\n                    print mesh[index]\n                    joints = cmds.skinCluster (item , q=True , inf=True)\n                    cmds.textField( textFieldName, e=True, text='')\n                    for obj in mesh:\n                        findSkinEnd = mel.eval('findRelatedSkinCluster ' + obj)\n        \n                        if cmds.objExists (findSkinEnd):\n                            print findSkinEnd\n                        else:\n                            newskin = cmds.skinCluster(obj, joints, n=textField_obj + \"_SKC\")\n                            break\n                            \n                    newSelect = cmds.select (joints, selection, obj , add= True)\n                    transfer = cmds.copySkinWeights (nm=True, sa =\"closestPoint\", ia =\"closestJoint\")\n                    cleanSkinEnd = mel.eval('removeUnusedInfluences ')\n                       \n                cmds.select (cl=True)\n                cmds.delete (selection)\n               \n\n\nclass CombineSeparateSkinnedMesh():\n    def __init__(self):\n        \n        global textFieldName\n        \n        if cmds.window('CombSepSkinMeshWin', exists=True):\n           cmds.deleteUI('CombSepSkinMeshWin')\n\t\t\n        CombSepSkinMeshWin = cmds.window (\"CombSepSkinMeshWin\", title=\"Combine Separate Skinned Mesh\", widthHeight=(300, 120), s=0)\n        cmds.columnLayout(adjustableColumn=True )\n        cmds.text( label='Assign Name to New Mesh' )\n        textFieldName = cmds.textField()\n        spacenoedit = cmds.textField( ed = False)\n        cmds.button( label='Combine Skinned Mesh', c=CombineSkinnedMeshProc)\n        cmds.button( label='Separate Skinned Mesh', c=SeparateSkinnedMeshProc)\n        cmds.setParent( '..' )\n        cmds.showWindow(CombSepSkinMeshWin)   \n        \nCombineSeparateSkinnedMesh()" )
        -mip 11
        -mi "transfer weights" ( "#credit : shinyprem\n# https://www.highend3d.com/maya/script/skintransferbetweentwojnt-for-maya\n# .\n# \n# \n# Position the new joint in its new position\n#Follow the UI instruction to transfer the skinWeight between two joint\n\n\nimport maya.cmds as mc\nimport maya.mel as mel\nclass skinInflJnt:\n    def __init__(self):\n        pass\n        if mc.window('SkinInflJnt', exists=True):\n            mc.deleteUI('SkinInflJnt', window=True)\n        mc.window( 'SkinInflJnt', s=1 )\n        mc.rowColumnLayout( numberOfColumns=2 )\n        mc.text( label='Select mesh  ( Geo ) !              ', align = 'left' )\n        mc.button( label='    Get    ', command= 'Geo = mc.ls(sl=True); print(Geo)')\n        mc.text( label='Select New Influence joint ( Jnt ) !            ', align = 'left' )\n        mc.button( label='    Get    ', command='Jnt = mc.ls(sl=True)')\n        mc.text( label='Select Old Influence joint ( Jnt ) !            ', align = 'left' )\n        mc.button( label='    Get    ', command='sourceJnt = mc.ls(sl=True)')\n        mc.button( label='Transfer', command=lambda event:self.skinToJnt())\n        mc.setParent( '..' )\n        mc.showWindow( 'SkinInflJnt' )\n        \n    def skinToJnt(self):\n        skin = mel.eval('findRelatedSkinCluster '+Geo[0])\n        cmds.select (cmds.skinCluster(skin,query=True,inf=True))\n        allJntInfl = cmds.ls(sl=True)\n        eachJnt = 0\n        for eachJnt in allJntInfl:\n            cmds.skinCluster(skin,e=True,inf=eachJnt,lw=1)\n            eachJnt = ++1\n        cmds.skinCluster(skin,edit=True,lw=True,wt=0,ai=Jnt)\n        cmds.skinCluster(skin,e=True,inf=Jnt[0],lw=0)\n        cmds.skinCluster(skin,e=True,inf=sourceJnt[0],lw=0)\n        cmds.skinCluster(skin,edit=True,selectInfluenceVerts=sourceJnt[0])\n        cmds.skinPercent(skin, transformValue=[(sourceJnt[0],0),(Jnt[0],1)])\n        eachJnt = 0\n        for eachJnt in allJntInfl:\n            cmds.skinCluster(skin,e=True,inf=eachJnt,lw=0)\n            eachJnt = ++1\n        cmds.select (cl=True)\nskinInflJnt()" )
        -mip 12
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Paint weights on smooth bound skins" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Paint Skin Weights" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "paintSkinWeights.png" 
        -image1 "paintSkinWeights.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "ArtPaintSkinWeightsTool" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
        -mi "transfer weights" ( "#credit : shinyprem\n# https://www.highend3d.com/maya/script/skintransferbetweentwojnt-for-maya\n# .\n# \n# \n# Position the new joint in its new position\n#Follow the UI instruction to transfer the skinWeight between two joint\n\n\nimport maya.cmds as mc\nimport maya.mel as mel\nclass skinInflJnt:\n    def __init__(self):\n        pass\n        if mc.window('SkinInflJnt', exists=True):\n            mc.deleteUI('SkinInflJnt', window=True)\n        mc.window( 'SkinInflJnt', s=1 )\n        mc.rowColumnLayout( numberOfColumns=2 )\n        mc.text( label='Select mesh  ( Geo ) !              ', align = 'left' )\n        mc.button( label='    Get    ', command= 'Geo = mc.ls(sl=True); print(Geo)')\n        mc.text( label='Select New Influence joint ( Jnt ) !            ', align = 'left' )\n        mc.button( label='    Get    ', command='Jnt = mc.ls(sl=True)')\n        mc.text( label='Select Old Influence joint ( Jnt ) !            ', align = 'left' )\n        mc.button( label='    Get    ', command='sourceJnt = mc.ls(sl=True)')\n        mc.button( label='Transfer', command=lambda event:self.skinToJnt())\n        mc.setParent( '..' )\n        mc.showWindow( 'SkinInflJnt' )\n        \n    def skinToJnt(self):\n        skin = mel.eval('findRelatedSkinCluster '+Geo[0])\n        mc.select (mc.skinCluster(skin,query=True,inf=True))\n        allJntInfl = mc.ls(sl=True)\n        eachJnt = 0\n        for eachJnt in allJntInfl:\n            mc.skinCluster(skin,e=True,inf=eachJnt,lw=1)\n            eachJnt = ++1\n        mc.skinCluster(skin,edit=True,lw=True,wt=0,ai=Jnt)\n        mc.skinCluster(skin,e=True,inf=Jnt[0],lw=0)\n        mc.skinCluster(skin,e=True,inf=sourceJnt[0],lw=0)\n        mc.skinCluster(skin,edit=True,selectInfluenceVerts=sourceJnt[0])\n        mc.skinPercent(skin, transformValue=[(sourceJnt[0],0),(Jnt[0],1)])\n        eachJnt = 0\n        for eachJnt in allJntInfl:\n            mc.skinCluster(skin,e=True,inf=eachJnt,lw=0)\n            eachJnt = ++1\n        mc.select (cl=True)\nskinInflJnt()" )
        -mip 0
        -mi "Component Editor" ( "ComponentEditor" )
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Move object A to object B" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Move object A to object B" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "a2b" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import pymel.core as pm\n\npm.matchTransform(pos = True, rot = False, scale = False)\n\nselection = pm.ls(sl=1)[0]\n\npm.select(selection)" 
        -sourceType "python" 
        -doubleClickCommand "import pymel.core as pm\n\npm.matchTransform(pos = True, rot = True, scale = False)\n\nselection = pm.ls(sl=1)[0]\n\npm.select(selection)" 
        -commandRepeatable 1
        -flat 1
        -mi "Translate" ( "import pymel.core as pm\n\npm.matchTransform(pos = True, rot = False, scale = False)\n\nselection = pm.ls(sl=1)[0]\n\npm.select(selection)" )
        -mip 0
        -mi "Trans-Rot" ( "import pymel.core as pm\n\npm.matchTransform(pos = True, rot = True, scale = False)\n\nselection = pm.ls(sl=1)[0]\n\npm.select(selection)" )
        -mip 1
        -mi "T - R - S" ( "import pymel.core as pm\n\npm.matchTransform(pos = True, rot = True, scale = True)\n\nselection = pm.ls(sl=1)[0]\n\npm.select(selection)" )
        -mip 2
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Matching tools" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "User Script" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "Match_ICO.png" 
        -image1 "Match_ICO.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "print(\"User defined macro\");" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
        -mi "Brow" ( "import pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\n#target brow\njoint_target_list = []\nbrow_main_control = pm.ls(sl=1)[0]\nbrow_main_grp = pm.ls(str(brow_main_control).replace('_CTL','_GRP'))[0]\ntry:\n\tbrow_controls = pm.ls(uf.meta_traverse(source = brow_main_control, relation = 'child', tag = 'microController'))\n\ttarget_position = uf.nest_transform(name = str(brow_main_control)+ '_target_position', action = 'child', target = pm.ls(sl=1)[0], transformObj = 'locator', transformRadius = 1.0)\n\tpm.parent(target_position, world = True)\n\tbrow_position = uf.average_position(*brow_controls)\n\toffset_joint = pm.joint(name = str(brow_main_control)+ '_offset_thing', relative = False, radius = 2, position = brow_position)\n\tpm.parent(offset_joint, world = True)\n\toffset_joint | target_position\n\texcept:\n\t\tpm.warning('problem in initial setup')\ntry:\n\tfor control_object in brow_controls:\n\t\tjoint_target_list = joint_target_list+ [uf.meta_traverse(source = control_object, relation = 'child', tag = 'jointSkin')[0]]\n\t\tfinal_position = uf.average_position(*joint_target_list)\n\t\tpm.xform(offset_joint, translation = final_position, worldSpace = True)\n\t\tpm.matchTransform(brow_main_grp, target_position, pos = True, rot = False, scale = False)\n\t\tpm.delete(offset_joint)\n\t\texcept:\n\t\t\tpm.warning('main position match problem')\n\t\t\ttry:\n\t\t\t\tfor control_object in brow_controls:\n\t\t\t\tjoint_target = uf.meta_traverse(source = control_object, relation = 'child', tag = 'jointSkin')[0]\n\t\t\t\tcontrol_grp = pm.ls(str(control_object).replace('_CTL','_GRP'))[0]\n\t\t\t\tprint(control_grp)\n\t\t\t\tpm.delete(control_grp, constraints = 1)\n\t\t\t\tpm.matchTransform(control_grp, joint_target, pos = True, rot = True, scale = False)\n\tif '_R_' in str(control_object):\n\t\tpm.xform(control_object, euler = True, rotation = [0,0,180])\n\t\t#rotate -r -os -fo 0 0 186.273403 -puv\n\t\ttr_constraint = pm.parentConstraint (control_object,joint_target, mo = 1, weight = 1)\n\t\ttr_constraint.setAttr('interpType', 2)\n\t\tsc_constraint = pm.scaleConstraint(control_object,joint_target, mo = 1, weight = 1)\n\t\ttr_constraint_grp = pm.parentConstraint(brow_main_control, control_grp, mo = 1, weight = 1)\n\t\ttr_constraint_grp.setAttr('interpType', 2) \n\t\tsc_constraint_grp = pm.scaleConstraint(brow_main_control, control_grp, mo = 1, weight = 1)\n\t\texcept:\n\t\t\tpm.warning('failed to match microControllers')" )
        -mip 0
        -mi "Match GenChar skeleton" ( "# MATCH LIST A TO LIST B\n#look into \"Longest Common Substring\" problem to attempt to automatch based on names and skip others\nimport pymel.core as pm\n\nsource_root = pm.ls(sl=1)[0]\ntarget_root = pm.ls(sl=1)[1]\n\n#source_list = targets[::2]\n#target_list = targets[1::2]\n#source_list = targets[:len(targets)//2]\n#target_list = targets[len(targets)//2:]\nsource_list = pm.ls(source_root,dag=1,ap=1,sl=0)\ntarget_list = pm.ls(target_root,dag=1,ap=1,sl=0)\n\nfor index, source_object in enumerate(source_list):\n    print(str(source_object))\n    target_object = target_list[index]\n    pm.matchTransform(source_object, target_object, pos = True, rot = True, scale = False)" )
        -mip 1
        -mi "Match to replace name" ( "# MATCH LIST A TO LIST B\n#look into \"Longest Common Substring\" problem to attempt to automatch based on names and skip others\nimport pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\nsource_root = pm.ls(sl=1)[0]\ntarget_string = uf.prompt_string(promptTitle='target string', promptMessage='target string to replace for Skel')\nsource_list = pm.ls(source_root,dag=1,ap=1,sl=0)\n\nfor index, source_object in enumerate(source_list):\n    print(str(source_object))\n    target_name = str(source_object).replace('Skel', target_string)\n    target_object = pm.ls(target_name)[0]\n    pm.matchTransform(source_object, target_object, pos = True, rot = True, scale = False)" )
        -mip 2
        -mi "Copy Pivot A to B" ( "import pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\n\n#Copy 1st selecton's pivot to 2nd selection\nuf.match_pivot(source = pm.ls(sl=1)[0], target = pm.ls(sl=1)[1])" )
        -mip 3
        -mi "TRNS - match zero to world zero" ( "import pymel.core as pm\n\ntransform_list = pm.ls(sl=1)\n\nfor transform in transform_list:\n    original_location = pm.xform(transform, q=True, worldSpace = True, relative=True, rotatePivot=True)\n    print (original_location)\n    original_rotation = pm.xform(transform, query = True, rotation = True, worldSpace = True)\n    transform_parent = transform.getParent()\n    pm.parent(transform, world = True)\n    pm.move (rotatePivotRelative = True, x=0, y=0, z=0)\n    pm.makeIdentity(transform, apply = True, translate = True, rotate = False, scale = True)\n    pm.xform(transform, ws=True, translation= original_location)" )
        -mip 4
        -mi "Banana mation" ( "#THIS SHIT'S BANANAS!!\n\n#      |_   _. ._   _. ._   _. \n#      |_) (_| | | (_| | | (_| \n\n#Copy animation from an animated xform to a non animated one.\n#Advance between keyed frames on source TRS\n#assuming only two transform type objects are selected, source has keys\n\nfRangeStart = int(cmds.playbackOptions(query = True, minTime = True))\nfRangeStop = int(cmds.playbackOptions(query = True, maxTime = True))\nprint(fRangeStart)\nprint \"RangeStart\"\nprint(fRangeStop)\nprint \"RangeStop\"\n\nobjectList = []\nobjectListLength = 1\nmatchList = []\n\nmatchList = cmds.ls (sl = 1)\ntime = fRangeStart\noldTime = fRangeStart - 1\n\nwhile oldTime < time and time <= fRangeStop :\n   print(time)\n   pm.matchTransform(matchList[0], matchList[1], pos = True, rot = True, scale = False)\n   #matchAtoB(matchList[0], matchList[1])\n   cmds.setKeyframe()\n   #move to next key on object A\n   cmds.select(matchList[1], replace = True)\n   cmds.currentTime( (cmds.findKeyframe( timeSlider = True, which=\"next\" )), edit = True)\n   oldTime = time\n   time = cmds.currentTime(query = True)\n   if oldTime >= time:\n       break\n" )
        -mip 5
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "put transform in world space" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Transform in worldspace" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "TRNS" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import pymel.core as pm\n\ntransform_list = pm.ls(sl=1)\n\nfor transform in transform_list:\n    original_location = pm.xform(transform, q=True, worldSpace = True, relative=True, rotatePivot=True)\n    print (original_location)\n    original_rotation = pm.xform(transform, query = True, rotation = True, worldSpace = True)\n    transform_parent = transform.getParent()\n    pm.parent(transform, world = True)\n    pm.move (rotatePivotRelative = True, x=0, y=0, z=0)\n    pm.makeIdentity(transform, apply = True, translate = True, rotate = False, scale = True)\n    pm.xform(transform, ws=True, translation= original_location)" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
        -mi "Copy Pivot A to B" ( "import pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\n\n#Copy 1st selecton's pivot to 2nd selection\nuf.match_pivot(source = pm.ls(sl=1)[0], target = pm.ls(sl=1)[1])" )
        -mip 0
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Select object(s) to animate along a motion path, followed by the motion path curve" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Attach to Motion Path" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "motionPath.png" 
        -image1 "motionPath.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "pathAnimation -fractionMode true -follow true -followAxis x -upAxis y -worldUpType \"vector\" -worldUpVector 0 1 0 -inverseUp false -inverseFront false -bank false -startTimeU `playbackOptions -query -minTime` -endTimeU  `playbackOptions -query -maxTime`" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Delete constraints" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Delete Constraints" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "Del" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "parentConstraint.png" 
        -image1 "parentConstraint.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import pymel.core as pm\npm.delete(constraints = 1)" 
        -sourceType "python" 
        -doubleClickCommand "import pymel.core as pm\ntargets = pm.ls(sl=1)\n\nfor item in targets:\n    pm.select(item, hierarchy = True)\n    pm.delete(constraints = 1)\n" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Parent and scale constraint" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Constraints" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "_p_" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "parentConstraint.png" 
        -image1 "parentConstraint.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import pymel.core as pm\n\nconstraint = pm.parentConstraint (mo = 1, weight = 1)\nconstraint.setAttr('interpType', 2)\npm.scaleConstraint(mo = True)" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
        -mi "Constrain to Controller" ( "import pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\n\nstart_object = pm.ls(sl=1)[0]\n\nif start_object.hasAttr('jointSkin'):\n    control_object = uf.meta_traverse(source = start_object, relation = 'parent')\n    pm.select(control_object)\n    print control_object\n    constraint = pm.parentConstraint (control_object, start_object, mo = 1, weight = 1)\n    constraint.setAttr('interpType', 2)\n    pm.scaleConstraint(control_object, start_object, mo = True)\nelif start_object.hasAttr('controller') or start_object.hasAttr('microController'):\n    current_joint = uf.meta_traverse(source = start_object, relation = 'child', tag = 'jointSkin')[0]\n    constraint = pm.parentConstraint (start_object, current_joint, mo = 1, weight = 1)\n    constraint.setAttr('interpType', 2)\n    pm.scaleConstraint(start_object, current_joint, mo = True)\nelse:\n    pm.warning('does not appear to be a valid object')" )
        -mip 0
        -mi "Parent Constraint" ( "import pymel.core as pm\n\nconstraint = pm.parentConstraint (mo = 1, weight = 1)\nconstraint.setAttr('interpType', 2)\n\n" )
        -mip 1
        -mi "Point Constraint" ( "import pymel.core as pm\n\nsource_object = pm.ls(sl=1)[0]\ntarget_object = pm.ls(sl=1)[1]\npoint_constraint = pm.pointConstraint(source_object, target_object, maintainOffset = True)\n" )
        -mip 2
        -mi "Orient Constraint" ( "import pymel.core as pm\n\nsource_object = pm.ls(sl=1)[0]\ntarget_object = pm.ls(sl=1)[1]\norient_constraint = pm.orientConstraint(source_object, target_object, maintainOffset = True)\norient_constraint.setAttr('interpType', 2)" )
        -mip 3
        -mi "Link T/R attr" ( "import pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\nuf.list_link_attrs(Translate = 'xyz', Rotate = 'xyz', targets = pm.ls(sl=1))" )
        -mip 4
        -mi "Link Translate" ( "import pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\nuf.list_link_attrs(Translate = 'xyz', targets = pm.ls(sl=1))\n" )
        -mip 5
        -mi "Link Rotate" ( "import pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\nuf.list_link_attrs(Rotate = 'xyz', targets = pm.ls(sl=1))\n" )
        -mip 6
        -mi "Link Scale" ( "import pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\nuf.list_link_attrs(Scale = 'xyz', targets = pm.ls(sl=1))\n" )
        -mip 7
        -mi "MultiParent constraint" ( "import pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\n\nsatellites = pm.ls(sl=1)[0:-1]\ntarget = pm.ls(sl=1)[-1]\n\nuf.multi_constrain(satellites, target)" )
        -mip 8
        -mi "MultiPoint constraint" ( "import pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\n\nsatellites = pm.ls(sl=1)[0:-1]\ntarget = pm.ls(sl=1)[-1]\n\nuf.multi_constrain(satellites, target, constraintType = 'point')" )
        -mip 9
        -mi "MultiOrient constraint" ( "import pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\n\nsatellites = pm.ls(sl=1)[0:-1]\ntarget = pm.ls(sl=1)[-1]\n\nuf.multi_constrain(satellites, target, constraintType = 'orient')" )
        -mip 10
        -mi "Aim YZ" ( "import pymel.core as pm\n\nconstraint = pm.aimConstraint (mo = 1, weight = 1)\nconstraint.setAttr('interpType', 2)\n\n" )
        -mip 11
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Export deformer weights options" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Export Weights..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "EW" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "menuIconDeformations.png" 
        -image1 "menuIconDeformations.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "ExportDeformerWeightsOptions" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Import deformer weights options" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Import Weights..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "IW" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "menuIconDeformations.png" 
        -image1 "menuIconDeformations.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "ImportDeformerWeightsOptions" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Double Click to save selection, Single Click to select." 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Temp Selection" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "sel" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import maya.cmds as cmds\n\nprint selection\n\ncmds.select(cl = 1)\ncmds.select(selection, tgl = 1)\n" 
        -sourceType "python" 
        -doubleClickCommand "import maya.cmds as cmds\n\nselection = []\nselection = cmds.ls(sl = 1)\nprint selection\n\ncmds.headsUpMessage( 'selection saved' )" 
        -commandRepeatable 1
        -flat 1
        -mi "Select mirror" ( "#select mirror\nimport pymel.core as pm\n\nif '_R_' in str(pm.selected()):\n    pm.select(str(pm.selected()[0]).replace('_R_','_L_'))\nelif '_L_' in str(pm.selected()):\n    pm.select(str(pm.selected()[0]).replace('_L_','_R_'))\nelse:\n    pass" )
        -mip 0
        -mi "Selection Length" ( "import pymel.core as pm\npm.headsUpMessage(len(pm.ls(sl=1)))" )
        -mip 1
        -mi "Select Root" ( "import pymel.core as pm\n\npm.selected()[0].root()" )
        -mip 2
        -mi "Select Metaparents" ( "import pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\n\ntarget_list = pm.ls(sl=1)\nmetaparents = range(len(target_list))\nfor index in range(0, len(target_list)):\n    metaparents[index] = uf.meta_traverse(source = target_list[index], relation = 'parent', tag = '')\npm.select(metaparents)\n" )
        -mip 3
        -mi "Select Metachildren" ( "import pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\n\ntarget_list = pm.ls(sl=1)\nmetachildren = range(len(target_list))\nfor index in range(0, len(target_list)):\n    metachildren[index] = uf.meta_traverse(source = target_list[index], relation = 'child', tag = '')\npm.select(metachildren)" )
        -mip 4
        -mi "Select group" ( "#select mirror\nimport pymel.core as pm\n\nif '_CTL' in str(pm.selected()):\n    pm.select(str(pm.selected()[0]).replace('_CTL','_GRP'))\nelif '_OST' in str(pm.selected()):\n    pm.select(str(pm.selected()[0]).replace('_OST','_GRP'))\nelse:\n    pm.select(str(pm.selected()[0])+'_GRP')\n" )
        -mip 5
        -mi "Set selection 0" ( "import maya.cmds as cmds\n\nselection = []\nselection = cmds.ls(sl = 1)\nprint selection\n\ncmds.headsUpMessage( 'selection saved' )" )
        -mip 6
        -mi "Select 0" ( "import maya.cmds as cmds\n\nprint selection\n\ncmds.select(cl = 1)\ncmds.select(selection, tgl = 1)\n" )
        -mip 7
        -mi "Set selection 1" ( "import maya.cmds as cmds\n\nselection1 = []\nselection1 = cmds.ls(sl = 1)\nprint selection1\n\ncmds.headsUpMessage( 'selection saved' )" )
        -mip 8
        -mi "Select 1" ( "import maya.cmds as cmds\n\nprint selection1\n\ncmds.select(cl = 1)\ncmds.select(selection1, tgl = 1)\n" )
        -mip 9
        -mi "Set selection 2" ( "import maya.cmds as cmds\n\nselection2 = []\nselection2 = cmds.ls(sl = 1)\nprint selection2\n\ncmds.headsUpMessage( 'selection 2 saved' )" )
        -mip 10
        -mi "Select 2" ( "import maya.cmds as cmds\n\nprint selection2\n\ncmds.select(cl = 1)\ncmds.select(selection2, tgl = 1)\n" )
        -mip 11
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Make curve along selected vertices" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "EP Curve Tool" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "vCrv" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "curveEP.png" 
        -image1 "curveEP.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\n\n\noutput_curve_name = uf.prompt_string(promptTitle = 'Curve Name', promptMessage = 'Enter curve name')\nselection = pm.ls(sl=1, flatten = True)\nuf.curve_on_vertices(name = output_curve_name, vertices = selection)" 
        -sourceType "python" 
        -doubleClickCommand "EPCurveToolOptions" 
        -commandRepeatable 1
        -flat 1
        -mi "Curve on xforms" ( "import pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\n\noutput_curve_name = uf.prompt_string(promptTitle = 'Curve Name', promptMessage = 'Enter curve name')\nselection = pm.ls(sl=1)\nuf.curve_on_transforms(name = output_curve_name, transforms = selection)" )
        -mip 0
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Comet Rename" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Comet Rename" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "C:\\Users\\roumenov\\Documents\\maya\\2018\\scripts\\dilloTools\\images\\rename.png" 
        -image1 "C:\\Users\\roumenov\\Documents\\maya\\2018\\scripts\\dilloTools\\images\\rename.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "mel.eval(\"cometRename;\")" 
        -sourceType "python" 
        -doubleClickCommand "performSearchReplaceNames 1" 
        -commandRepeatable 1
        -flat 1
        -mi "SaRN" ( "performSearchReplaceNames 1" )
        -mi "Remove Suffix" ( "import pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\n\nremove = uf.prompt_string(promptTitle = '', promptMessage = '')\n\nfor item in pm.ls(sl=1):\n    current_name = str(item)\n    new_name = uf.strip_suffix(inputString=current_name, suffix=remove)\n    item.rename(new_name)" )
        -mip 1
        -mi "Remove Prefix" ( "import pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\n\nremove = uf.prompt_string(promptTitle = '', promptMessage = '')\n\nfor item in pm.ls(sl=1):\n    current_name = str(item)\n    new_name = uf.strip_prefix(inputString=current_name, suffix=remove)\n    item.rename(new_name)" )
        -mip 2
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Channel Control" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Charcoal Editor 2" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "channels_icon.png" 
        -image1 "channels_icon.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import Red9.core.Red9_CoreUtils as r9Core;r9Core.LockChannels.UI.show()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
        -mi "Lock All" ( "import pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\n\ntarget_list = pm.ls(sl=1)\n\nfor target in target_list:\n    uf.attr_lock(target, attr = 'all', lock = True)" )
        -mip 0
        -mi "Unlock All" ( "import pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\n\ntarget_list = pm.ls(sl=1)\n\nfor target in target_list:\n    uf.attr_lock(target, attr = 'all', lock = False)\n    uf.attr_lock(target, attr = 'visibility', lock = False)\n" )
        -mip 1
        -mi "Lock Translate" ( "import pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\n\ntarget_list = pm.ls(sl=1)\n\nfor target in target_list:\n    uf.attr_lock(target, attr = 'translate', lock = True)" )
        -mip 2
        -mi "Lock Rotate" ( "import pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\n\ntarget_list = pm.ls(sl=1)\n\nfor target in target_list:\n    uf.attr_lock(target, attr = 'rotate', lock = True)" )
        -mip 3
        -mi "Lock Scale" ( "import pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\n\ntarget_list = pm.ls(sl=1)\n\nfor target in target_list:\n    uf.attr_lock(target, attr = 'scale', lock = True\n" )
        -mip 4
        -mi "Lock Visibility" ( "import pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\n\ntarget_list = pm.ls(sl=1)\n\nfor target in target_list:\n    uf.attr_lock(target, attr = 'visibility', lock = True)" )
        -mip 5
        -mi "Unlock Translate" ( "import pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\n\ntarget_list = pm.ls(sl=1)\n\nfor target in target_list:\n    uf.attr_lock(target, attr = 'translate', lock = False)" )
        -mip 6
        -mi "Unlock Rotate" ( "import pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\n\ntarget_list = pm.ls(sl=1)\n\nfor target in target_list:\n    uf.attr_lock(target, attr = 'rotate', lock = False)" )
        -mip 7
        -mi "Unlock Scale" ( "import pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\n\ntarget_list = pm.ls(sl=1)\n\nfor target in target_list:\n    uf.attr_lock(target, attr = 'scale', lock = False)" )
        -mip 8
        -mi "Unlock Visibility" ( "import pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\n\ntarget_list = pm.ls(sl=1)\n\nfor target in target_list:\n    uf.attr_lock(target, attr = 'visibility', lock = False)" )
        -mip 9
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 39
        -height 39
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "JTD Rigging Tools" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "JTD Rigging Tools" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "C:/Users/abogoev/Documents/maya/2018/scripts/dilloTools/images/jtdRiggingTools.png" 
        -image1 "C:/Users/abogoev/Documents/maya/2018/scripts/dilloTools/images/jtdRiggingTools.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "mel.eval(\"source JTDriggingUI; JTDtoolsWindow;\")" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
        -mi "Aim Z+" ( "import pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\n\"\"\"\nAim fist thing at second thing, then delete history.\n\"\"\"\ntarget_list = pm.ls(sl=1)\nuf.aim_object(target_list[0], target_list[1], axis = '+z')" )
        -mip 0
        -mi "Aim Joint X-" ( "import pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\n\"\"\"\nAim fist thing at second thing, then delete history.\n\"\"\"\ntarget_list = pm.ls(sl=1)\nuf.aim_object(target_list[0], target_list[1], axis = '-x')\n" )
        -mip 1
        -mi "Aim Joint X+" ( "import pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\n\"\"\"\nAim first thing at second thing, delete history if it's a joint.\n\"\"\"\ntarget_list = pm.ls(sl=1)\nuf.aim_object(target_list[0], target_list[1], axis = '+x')\n" )
        -mip 2
        -mi "Segment Scale Off" ( "import pymel.core as pm\n\nitem_list = pm.ls(sl=1)\nfor item in item_list:\n    if item.hasAttr('segmentScaleCompensate'):\n        item.setAttr('segmentScaleCompensate', False)\n    else:\n        pass\n" )
        -mip 3
        -mi "Segment Scale On" ( "import pymel.core as pm\n\nitem_list = pm.ls(sl=1)\nfor item in item_list:\n    if item.hasAttr('segmentScaleCompensate'):\n        item.setAttr('segmentScaleCompensate', True)\n    else:\n        pass\n" )
        -mip 4
        -mi "Draw Joint Labels" ( "import pymel.core as pm\nfor item in item_list:\n    if item.hasAttr('drawLabel'):\n        item.setAttr('drawLabel', True)\n    else:\n        pass" )
        -mip 5
        -mi "Hide Joint Labels" ( "import pymel.core as pm\nfor item in item_list:\n    if item.hasAttr('drawLabel'):\n        item.setAttr('drawLabel', False)\n    else:\n        pass\n" )
        -mip 6
        -mi "Toggle LRA" ( "ToggleLocalRotationAxes" )
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Make selected objects meta children of first selected object. + other meta tools in menu" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Meta Tag Tools" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "meta" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "eggs_ICO.png" 
        -image1 "eggs_ICO.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\n\nmeta_parent = pm.ls(sl=1)[0]\nmeta_children = pm.ls(sl=1)[1::1]\nuf.meta_make_child(meta_parent, *meta_children)" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
        -mi "+ metaparent tag" ( "import pymel.core as pm\n\ntag_list = pm.ls(sl=1)\nfor target in tag_list:\n    if target.hasAttr('metaParent'):\n        print('metaParent tag exists')\n    else:\n        print('adding metaParent tag')\n        pm.addAttr(target, longName = 'metaParent', attributeType = 'message')\n" )
        -mip 0
        -mi "+ microController tag" ( "import pymel.core as pm\n#add microController tag\n\ntag_list = pm.ls(sl=1)\nfor target in tag_list:\n\tif target.hasAttr('controller'):\n        pm.deleteAttr(target, at = 'controller')\n\t\tif target.hasAttr('microController'):\n\t\t\tprint('microController tag exists')\n\t\telse:\n\t\t\tpm.addAttr(target, longName = 'microController', attributeType = 'message')\n    elif target.hasAttr('microController'):\n        print('microController tag exists')\n    else:\n        pm.addAttr(target, longName = 'microController', attributeType = 'message')\n" )
        -mip 1
        -mi "- microController tag" ( "import pymel.core as pm\n#remove microController tag\n\ntag_list = pm.ls(sl=1)\nfor target in tag_list:\n    if target.hasAttr('microController'):\n\t\tpm.deleteAttr(target, at = 'microController')\n    else:\n        pass\n\nprint('removed microController tag')" )
        -mip 2
        -mi "+ controller tag" ( "import pymel.core as pm\n#add controller tag\n\ntag_list = pm.ls(sl=1)\nfor target in tag_list:\n    if target.hasAttr('microController'):\n        pm.deleteAttr(target, at = 'microController')\n        if target.hasAttr('controller'):\n\t\t\tprint('controller tag exists')\n        else:\n            pm.addAttr(target, longName = 'controller', attributeType = 'message')\n    elif target.hasAttr('controller'):\n        print('controller tag exists')\n    else:\n        pm.addAttr(target, longName = 'controller', attributeType = 'message')\n" )
        -mip 3
        -mi "- controller" ( "import pymel.core as pm\n#remove controller tag\n\ntag_list = pm.ls(sl=1)\nfor target in tag_list:\n    if target.hasAttr('controller'):\n\t\tpm.deleteAttr(target, at = 'controller')\n    else:\n        pass\n\nprint('removed controller tag')" )
        -mip 4
        -mi "Auto Joint Tag" ( "#PURPOSE            tag skinned and unskinned joints\n#PROCEDURE            make list of _JS joints, iterate and check for skincluster,\n#                    store skinned and unskinned joints in list\n#PRESUMPTION        all skinned joints have suffix \"JS\"\ndef tag_skinJoints():\n    skinnableJoints = pm.ls(\"*JS\", type = \"joint\")\n    pm.select(skinnableJoints, replace = True)\n    pm.addAttr(shortName = 'xnd', longName = 'exportNode', attributeType = 'message')\n    unskinnedJoints = []\n    jointsWithSkin = []\n    #pm.select(skinnableJoints)\n    for currentJoint in skinnableJoints:\n        if check_skincluster(currentJoint) == True:\n            print(currentJoint + \" is skinned\")\n            jointsWithSkin.append(currentJoint)\n            pm.select(currentJoint, replace = True)\n            pm.addAttr(shortName = 'skj', longName = 'skinJoint', attributeType = 'message')\n        if check_skincluster(currentJoint) == None:\n            print(currentJoint + \" has no skin\")\n            unskinnedJoints.append(currentJoint)\n            pm.select(currentJoint, replace = True)\n            pm.addAttr(shortName = 'nos', longName = \"noSkin\", attributeType = 'message')\n        else:\n            print(\"something fuckey happened\")\n        #pm.select(jointObject)\n    if unskinnedJoints:\n        print(\"following skinJoints lack skin!!\")\n        print(unskinnedJoints)\n    if not unskinnedJoints:\n        print(\"no unskinned joints found\")\n        print(unskinnedJoints)\n    else:\n        print(\"something fuckey happened\")\n    print('skin joints with skin:')\n    print(jointsWithSkin)" )
        -mip 5
        -mi "+ jointDriver tag" ( "import pymel.core as pm\n\ntag_list = pm.ls(sl=1)\nfor target in tag_list:\n    if target.hasAttr('jointDriver'):\n        print('jointDriver tag exists')\n    else:\n        print('adding metaParent tag')\n        pm.addAttr(longName = 'jointDriver', attributeType = 'message')\n" )
        -mip 6
        -mi "+ jointSkin tag" ( "import pymel.core as pm\n\ntag_list = pm.ls(sl=1)\nfor target in tag_list:\n    if target.hasAttr('jointSkin'):\n        print('jointSkin tag exists')\n    else:\n        pm.addAttr(target, longName = 'jointSkin', attributeType = 'message')\n" )
        -mip 7
        -mi "WIP tag root" ( "#PURPOSE            set up basic selections for baking, exporting, and any other procedures that need a direct reference to scene objects\n#PROCEDURE          \n#PRESUMPTION        user is selecting a node in the hierarchy of the rig they intend to export, ?names? have not been imported\ndef tag_root(tag = False,target = None):       ## ---- upgrade to use attr, need to distinguish the character somehow....\n    if tag:\n        pm.select(target)\n        rootNode = pm.selected()[0].root()\n        pm.select(clear = True)\n        if rootNode.hasAttr(\"exportRoot\"):\n            print('success!')\n        else:\n            pm.addAttr(rootNode, longName = 'exportRoot', attributeType = 'message')\n            print('fail')\n        #rigRootName = rootNode.name() + \"Set\"\n        #rootNode = pm.sets(name = rigRootName)\n        return rootNode\n        #query .sets to get the name\n    else:\n        rootNode == pm.ls('*.export', objectsOnly = True)\n        return rootNode\n        \n        #rigRootName = rootNode.name() + \"Set\"\n        #rootNode = pm.sets(name = rigRootName)\n#    pm.select(root)\n\n#tag_root(tag = False,target = None)" )
        -mip 8
        -mi "+ export tag" ( "import pymel.core as pm\n\ntag_list = pm.ls(sl=1)\nfor target in tag_list:\n    if target.hasAttr('export'):\n        print('export tag exists')\n    else:\n        pm.addAttr(target, longName = 'export', attributeType = 'message')\n\nprint('added export tags')" )
        -mip 9
        -mi "+ noExport tag" ( "import pymel.core as pm\n\ntag_list = pm.ls(sl=1)\nfor target in tag_list:\n    if target.hasAttr('noExport'):\n        print('noExport tag exists')\n    else:\n        pm.addAttr(target, longName = 'noExport', attributeType = 'message')\n\nprint('added noExport tags')" )
        -mip 10
        -mi "Set Rig Root" ( "rig_root = pm.selected()[0].root()\nprint(rig_root)" )
        -mip 11
        -mi "RRARig Connection" ( "import pymel.core as pm\n\ntag_list = pm.ls(sl=1)\nfor target in tag_list:\n    if target.hasAttr('RRARigConnection'):\n        print(target)\n        print('RRARigConnection attr exists')\n    else:\n        pm.addAttr(target, longName = 'RRARigConnection', type = 'string')\n        pm.addAttr(target, longName = 'RRARigName', type = 'string')\n        rig_root.RRARigConnection >> target.RRARigConnection\n        rig_root.RRARigConnection >> target.RRARigName\n        target_attr = str(target) + '.RRARigName'\n        pm.disconnectAttr(target_attr)\n        pm.setAttr(target_attr, lock = True)\n        #roots = pm.ls('*.potionomicsCharacterRoot', objectsOnly = True)" )
        -mip 12
        -mi "+ Potionomics Character Root tag" ( "import pymel.core as pm\n#designate potionomicsCharacterRoot\n\ntag_list = pm.ls(sl=1)\nfor target in tag_list:\n    if target.hasAttr('potionomicsCharacterRoot'):\n        print('object already has potionomicsCharacterRoot tag')\n    else:\n\t\tpm.addAttr(longName = 'potionomicsCharacterRoot', attributeType = 'message')\n" )
        -mip 13
        -mi "+ Potionomics Object Root tag" ( "import pymel.core as pm\n#designate potionomicsOjbectRoot\n\ntag_list = pm.ls(sl=1)\nfor target in tag_list:\n    if target.hasAttr('potionomicsOjbectRoot'):\n        print('object already has potionomicsOjbectRoot tag')\n    else:\n\t\tpm.addAttr(longName = 'potionomicsOjbectRoot', attributeType = 'message')\n" )
        -mip 14
        -mi "Replace Face Joint Meta Connections" ( "#replace character string\n\nimport pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\n#replace mint meta threads with base skeleton\njoint_list = pm.ls(sl=1)\n#count = 0\n\nfor mint_joint in joint_list:\n    if mint_joint.hasAttr('metaParent'):\n        \n        #count += 1\n        #print count\n        skel_name = str(mint_joint).replace('Mint_Skel', 'skel:Skel')\n        print(mint_joint.type())\n        print(skel_name)\n        skel_joint = pm.ls(skel_name)#[0]\n        print skel_joint\n        try:\n            joint_meta_parent = uf.meta_traverse(source = mint_joint, relation = 'parent', tag = 'tracker')\n            print(joint_meta_parent)\n        except:\n            pass\n        try:\n            joint_meta_parent.metaParent >> skel_joint[0].metaParent\n            joint_meta_parent.metaParent // mint_joint.metaParent\n            #uf.meta_make_child(joint_meta_parent, *skel_joint)\n            #metaParent# new joint\n            #pm.matchTransform(mint_joint, skel_joint, pos = True, rot = True, scale = False)\n        except:\n            print('failed to connect metaParent')\n    else:\n        print('no metaParent attr')" )
        -mip 15
        -mi "Meta Parent" ( "import pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\n\nmeta_parent = pm.ls(sl=1)[0]\nmeta_children = pm.ls(sl=1)[1::1]\nuf.meta_make_child(meta_parent, *meta_children)" )
        -mip 16
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Make trackers for selected objects." 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Tracker" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "TRACK" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "Tracker.png" 
        -image1 "Tracker.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "\n# make tracker\nimport pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\n\ntracker_target_list = pm.ls(sl=1)\ntracker_list = []\n\nfor tracker_target in tracker_target_list:\n    tracker_name = str(tracker_target) + '_tracker'\n    print(tracker_name)\n    tracker_group = uf.nest_transform(name = tracker_name + '_GRP', action = 'child', target = tracker_target, transformObj = 'group', transformRadius = 1)\n    #tracker_offset = uf.nest_transform(name = tracker_name, action = 'child', target = tracker_group, transformObj = 'cubeShape', transformRadius = .1)\n    tracker_object = uf.nest_transform(name = tracker_name, action = 'child', target = tracker_group, transformObj = 'cubeShape', transformRadius = 1)\n    shape_node = pm.listRelatives(tracker_object, shapes=True)[0]\n    shape_node.overrideEnabled.set(1)\n    shape_node.overrideRGBColors.set(1)\n    shape_node.overrideColorRGB.set(0, 0.6, 1)\n    pm.parent(tracker_group, world = True)\n    pm.addAttr(tracker_object, longName = 'tracker', attributeType = 'message')\n    tracker_target.metaParent >> tracker_object.metaParent\n    tracker_list.append(tracker_object)\n\npm.select(tracker_list, replace = True)" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
        -mi "connect micro to selected pivots" ( "import pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\n\ntracker_list = pm.ls(sl=1)\n\nfor item in tracker_list:\n    if item.hasAttr('tracker'):\n        micro_ctl = uf.meta_traverse(item, relation = 'parent')\n        micro_pivot = uf.meta_traverse(micro_ctl, relation = 'children', tag = 'rigPivot')\n        print \n        if '_CTL' in str(micro_ctl):\n            micro_grp = pm.ls(str(micro_ctl).replace('_CTL','_GRP'))\n        elif '_OST' in str(micro_ctl):\n            micro_grp = pm.ls(str(micro_ctl).replace('_OST','_GRP'))\n        else:\n            micro_grp = pm.ls(str(micro_ctl)+'_GRP')\n        print micro_grp\n        print micro_pivot\n        constraint = pm.parentConstraint (micro_pivot, micro_grp, mo = 1, weight = 1)\n        constraint.setAttr('interpType', 2)\n        pm.scaleConstraint(micro_pivot, micro_grp, mo = True)\n    else:\n        pm.warning(\"selected object has no 'tracker' attribute\")\n        pass" )
        -mip 0
        -mi "sphere tracker" ( "\n# make tracker\nimport pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\n\ntracker_target_list = pm.ls(sl=1)\ntracker_list = []\n\nfor tracker_target in tracker_target_list:\n    tracker_name = str(tracker_target) + '_tracker'\n    print(tracker_name)\n    tracker_group = uf.nest_transform(name = tracker_name + '_GRP', action = 'child', target = tracker_target, transformObj = 'group', transformRadius = 1)\n    tracker_object = uf.nest_transform(name = tracker_name, action = 'child', target = tracker_group, transformObj = 'sphereShape', transformRadius = 1)\n    shape_node = pm.listRelatives(tracker_object, shapes=True)[0]\n    shape_node.overrideEnabled.set(1)\n    shape_node.overrideRGBColors.set(1)\n    shape_node.overrideColorRGB.set(0, 0.6, 1)\n    pm.parent(tracker_group, world = True)\n    pm.addAttr(tracker_object, longName = 'tracker', attributeType = 'message')\n    tracker_target.metaParent >> tracker_object.metaParent\n    tracker_list.append(tracker_object)\n\npm.select(tracker_list, replace = True)" )
        -mip 1
        -mi "Align Pivots and microControls" ( "#disconnect and target microController pivots\nimport pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\n\nface_control_list = pm.ls(sl=1)\nobject = pm.ls(sl=1)[0]\ntry:\n    object_grp = pm.ls(str(object).replace('_CTL', '_GRP'))[0]\n    current_joint = uf.meta_traverse(source = object, relation = 'child', tag = 'jointSkin')[0]\n    print('joint :: '+ current_joint)\nexcept:\n    pm.warning('problem finding joint')\ntry:\n    current_pivot = uf.meta_traverse(source = object, relation = 'child', tag = 'rigPivot')[0]\n    #pm.select(uf.meta_traverse(source = object, relation = 'child', tag = 'rigPivot'))\n    print('pivot :: '+ str(current_pivot))\n    current_pivot_root = pm.ls(str(current_pivot+'_GRP'))[0]\n    current_pivot_ost = pm.ls(str(current_pivot+'_OST'))[0]\n    current_pivot.show()\nexcept:\n    pm.warning('problem finding pivot')\n\n#current_sphere = pm.ls(str(current_pivot).replace('pivotTarget', 'sphereVizShape'))#[0]\n#print(current_sphere)\n#current_ring = pm.ls(str(current_pivot).replace('pivotTarget', 'axialRingShape'))[0]\n#current_sphere.show()\n#current_ring.show()\ntry:\n    current_tracker = uf.meta_traverse(source = object, relation = 'child', tag = 'tracker')[0]\n    print('tracker :: '+str(current_tracker))\n    current_tracker.show()\n    current_tracker_grp = pm.ls(current_tracker+'_GRP')[0]\n    current_tracker_ost = pm.ls(current_tracker+'_OST')[0]\nexcept:\n    pm.warning('problem finding tracker')\ntry:\n    pm.delete(current_joint, constraints = 1)\n    pm.delete(current_pivot_root, constraints = 1)\n    pm.delete(object_grp, constraints = 1)\n    pm.delete(current_tracker_grp, constraints = 1)\n    #pm.xform(current_pivot_root, rotation = [0,0,0], translation = [0,0,0])\n    pm.xform(current_pivot_ost, rotation = [0,0,0], translation = [0,0,0])\n    pm.xform(current_tracker, rotation = [0,0,0], translation = [0,0,0])\n    pm.xform(current_tracker, rotation = [0,0,0], translation = [0,0,0])\n\n    pm.matchTransform(current_tracker_grp, current_joint, pos = True, rot = False, scale = False)\n    pm.matchTransform(object_grp, current_joint, pos = True, rot = False, scale = False)\n    #pm.matchTransform(current_tracker, current_joint, position = True, rotation = False)\nexcept:\n    pm.warning('problem settign transforms')\ntry:\n    print('tracker :: '+ current_tracker)\n    print('pivot grp :: '+ current_pivot_root)\n    #uf.aim_object(aimer = current_pivot_root, target = current_tracker, axis = '+x')\n    pivot_constraint = pm.aimConstraint(current_tracker,current_pivot_root, aimVector = (1,0,0), worldUpObject = 'Mint_faceBot_upLOCK', skip = 'x')\n    pm.select(current_tracker,current_pivot_root)\nexcept:\n    print('failed constraint')" )
        -mip 2
        -mi "Brow" ( "import pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\n#target brow\njoint_target_list = []\nbrow_main_control = pm.ls(sl=1)[0]\nbrow_main_grp = pm.ls(str(brow_main_control).replace('_CTL','_GRP'))[0]\ntry:\n\tbrow_controls = pm.ls(uf.meta_traverse(source = brow_main_control, relation = 'child', tag = 'microController'))\n\ttarget_position = uf.nest_transform(name = str(brow_main_control)+ '_target_position', action = 'child', target = pm.ls(sl=1)[0], transformObj = 'locator', transformRadius = 1.0)\n\tpm.parent(target_position, world = True)\n\tbrow_position = uf.average_position(*brow_controls)\n\toffset_joint = pm.joint(name = str(brow_main_control)+ '_offset_thing', relative = False, radius = 2, position = brow_position)\n\tpm.parent(offset_joint, world = True)\n\toffset_joint | target_position\n\texcept:\n\t\tpm.warning('problem in initial setup')\ntry:\n\tfor control_object in brow_controls:\n\t\tjoint_target_list = joint_target_list+ [uf.meta_traverse(source = control_object, relation = 'child', tag = 'jointSkin')[0]]\n\t\tfinal_position = uf.average_position(*joint_target_list)\n\t\tpm.xform(offset_joint, translation = final_position, worldSpace = True)\n\t\tpm.matchTransform(brow_main_grp, target_position, pos = True, rot = False, scale = False)\n\t\tpm.delete(offset_joint)\n\t\texcept:\n\t\t\tpm.warning('main position match problem')\n\t\t\ttry:\n\t\t\t\tfor control_object in brow_controls:\n\t\t\t\tjoint_target = uf.meta_traverse(source = control_object, relation = 'child', tag = 'jointSkin')[0]\n\t\t\t\tcontrol_grp = pm.ls(str(control_object).replace('_CTL','_GRP'))[0]\n\t\t\t\tprint(control_grp)\n\t\t\t\tpm.delete(control_grp, constraints = 1)\n\t\t\t\tpm.matchTransform(control_grp, joint_target, pos = True, rot = True, scale = False)\n\tif '_R_' in str(control_object):\n\t\tpm.xform(control_object, euler = True, rotation = [0,0,180])\n\t\t#rotate -r -os -fo 0 0 186.273403 -puv\n\t\ttr_constraint = pm.parentConstraint (control_object,joint_target, mo = 1, weight = 1)\n\t\ttr_constraint.setAttr('interpType', 2)\n\t\tsc_constraint = pm.scaleConstraint(control_object,joint_target, mo = 1, weight = 1)\n\t\ttr_constraint_grp = pm.parentConstraint(brow_main_control, control_grp, mo = 1, weight = 1)\n\t\ttr_constraint_grp.setAttr('interpType', 2) \n\t\tsc_constraint_grp = pm.scaleConstraint(brow_main_control, control_grp, mo = 1, weight = 1)\n\t\texcept:\n\t\t\tpm.warning('failed to match microControllers')" )
        -mip 3
        -mi "Align MicroControls" ( "#disconnect and target microController pivots\nimport pymel.core as pm\nimport rigTools\nreload(rigTools.vo_controls)\n\ncontrol_list = pm.ls(sl=1)\n\nfor item in control_list:\n    rigTools.vo_controls.match_micro(item)" )
        -mip 4
        -mi "Replace Meta Connections" ( "\n## ==== Replace meta threads ==== ##\nimport pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\nsource_joint_list = pm.ls(sl=1)\nsource_string = 'fr_Skel'\n#source_string = uf.prompt_string(promptTitle ='Source prefix', promptMessage = \"Enter source prefix to be replaced with 'Skel'\")\ntarget_string = 'skel:Skel'\n#target_string = uf.prompt_string(promptTitle ='Target prefix', promptMessage = \"Enter target prefix, probably has a colon\")\n\n\nfor item in source_joint_list:\n    parent_obj = uf.meta_traverse(source = item, relation = 'parent')\n    print parent_obj\n    \n    skel_name = str(item).replace(source_string, target_string)\n    print skel_name\n    if pm.objExists(skel_name):\n        pass\n        skel_joint = pm.ls(skel_name)[0]\n        pm.select(skel_joint)\n        if uf.meta_traverse(source = item, relation = 'parent'):\n            print 'reconnecting metaParent'\n            joint_meta_parent = uf.meta_traverse(source = item, relation = 'parent', tag = 'tracker')\n            joint_meta_parent.metaParent // item.metaParent\n            joint_meta_parent.metaParent >> skel_joint.metaParent\n        else:\n            print 'no metaParent for :: ' + str(item)\n            pass\n    else:\n        print 'no parallel object'\n        pass\n        \n" )
        -mip 5
        -mi "Match GenChar skeleton" ( "# MATCH LIST A TO LIST B\n#look into \"Longest Common Substring\" problem to attempt to automatch based on names and skip others\nimport pymel.core as pm\n\nsource_root = pm.ls(sl=1)[0]\ntarget_root = pm.ls(sl=1)[1]\n\n#source_list = targets[::2]\n#target_list = targets[1::2]\n#source_list = targets[:len(targets)//2]\n#target_list = targets[len(targets)//2:]\nsource_list = pm.ls(source_root,dag=1,ap=1,sl=0)\ntarget_list = pm.ls(target_root,dag=1,ap=1,sl=0)\n\nfor index, source_object in enumerate(source_list):\n    print(str(source_object))\n    target_object = target_list[index]\n    pm.matchTransform(source_object, target_object, pos = True, rot = True, scale = False)" )
        -mip 6
        -mi "Match  to replace name" ( "# MATCH LIST A TO LIST B\n#look into \"Longest Common Substring\" problem to attempt to automatch based on names and skip others\nimport pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\nsource_root = pm.ls(sl=1)[0]\ntarget_string = uf.prompt_string(promptTitle='target string', promptMessage='target string to replace for Skel')\nsource_list = pm.ls(source_root,dag=1,ap=1,sl=0)\n\nfor index, source_object in enumerate(source_list):\n    print(str(source_object))\n    target_name = str(source_object).replace('Skel', target_string)\n    target_object = pm.ls(target_name)[0]\n    pm.matchTransform(source_object, target_object, pos = True, rot = True, scale = False)" )
        -mip 7
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Align pivots and microcontrols to joint position" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Align pivots and microcontrols" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "align.png" 
        -image1 "align.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "#disconnect and target microController pivots\nimport pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\n\nface_control_list = pm.ls(sl=1)\nobject = pm.ls(sl=1)[0]\ntry:\n    object_grp = pm.ls(str(object).replace('_CTL', '_GRP'))[0]\n    current_joint = uf.meta_traverse(source = object, relation = 'child', tag = 'jointSkin')[0]\n    print('joint :: '+ current_joint)\nexcept:\n    pm.warning('problem finding joint')\ntry:\n    current_pivot = uf.meta_traverse(source = object, relation = 'child', tag = 'rigPivot')[0]\n    #pm.select(uf.meta_traverse(source = object, relation = 'child', tag = 'rigPivot'))\n    print('pivot :: '+ str(current_pivot))\n    current_pivot_root = pm.ls(str(current_pivot+'_GRP'))[0]\n    current_pivot_ost = pm.ls(str(current_pivot+'_OST'))[0]\n    current_pivot.show()\nexcept:\n    pm.warning('problem finding pivot')\n\n#current_sphere = pm.ls(str(current_pivot).replace('pivotTarget', 'sphereVizShape'))#[0]\n#print(current_sphere)\n#current_ring = pm.ls(str(current_pivot).replace('pivotTarget', 'axialRingShape'))[0]\n#current_sphere.show()\n#current_ring.show()\ntry:\n    current_tracker = uf.meta_traverse(source = object, relation = 'child', tag = 'tracker')[0]\n    print('tracker :: '+str(current_tracker))\n    current_tracker.show()\n    current_tracker_grp = pm.ls(current_tracker+'_GRP')[0]\n    current_tracker_ost = pm.ls(current_tracker+'_OST')[0]\nexcept:\n    pm.warning('problem finding tracker')\ntry:\n    pm.delete(current_joint, constraints = 1)\n    pm.delete(current_pivot_root, constraints = 1)\n    pm.delete(object_grp, constraints = 1)\n    pm.delete(current_tracker_grp, constraints = 1)\n    #pm.xform(current_pivot_root, rotation = [0,0,0], translation = [0,0,0])\n    pm.xform(current_pivot_ost, rotation = [0,0,0], translation = [0,0,0])\n    pm.xform(current_tracker, rotation = [0,0,0], translation = [0,0,0])\n    pm.xform(current_tracker, rotation = [0,0,0], translation = [0,0,0])\n\n    pm.matchTransform(current_tracker_grp, current_joint, pos = True, rot = False, scale = False)\n    pm.matchTransform(object_grp, current_joint, pos = True, rot = False, scale = False)\n    #pm.matchTransform(current_tracker, current_joint, position = True, rotation = False)\nexcept:\n    pm.warning('problem settign transforms')\ntry:\n    print('tracker :: '+ current_tracker)\n    print('pivot grp :: '+ current_pivot_root)\n    #uf.aim_object(aimer = current_pivot_root, target = current_tracker, axis = '+x')\n    pivot_constraint = pm.aimConstraint(current_tracker,current_pivot_root, aimVector = (1,0,0), worldUpObject = 'Mint_faceBot_upLOCK', skip = 'x')\n    pm.select(current_tracker,current_pivot_root)\nexcept:\n    print('failed constraint')" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
        -mi "Brow" ( "import pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\n#target brow\njoint_target_list = []\nbrow_main_control = pm.ls(sl=1)[0]\nbrow_main_grp = pm.ls(str(brow_main_control).replace('_CTL','_GRP'))[0]\ntry:\n\tbrow_controls = pm.ls(uf.meta_traverse(source = brow_main_control, relation = 'child', tag = 'microController'))\n\ttarget_position = uf.nest_transform(name = str(brow_main_control)+ '_target_position', action = 'child', target = pm.ls(sl=1)[0], transformObj = 'locator', transformRadius = 1.0)\n\tpm.parent(target_position, world = True)\n\tbrow_position = uf.average_position(*brow_controls)\n\toffset_joint = pm.joint(name = str(brow_main_control)+ '_offset_thing', relative = False, radius = 2, position = brow_position)\n\tpm.parent(offset_joint, world = True)\n\toffset_joint | target_position\n\texcept:\n\t\tpm.warning('problem in initial setup')\ntry:\n\tfor control_object in brow_controls:\n\t\tjoint_target_list = joint_target_list+ [uf.meta_traverse(source = control_object, relation = 'child', tag = 'jointSkin')[0]]\n\t\tfinal_position = uf.average_position(*joint_target_list)\n\t\tpm.xform(offset_joint, translation = final_position, worldSpace = True)\n\t\tpm.matchTransform(brow_main_grp, target_position, pos = True, rot = False, scale = False)\n\t\tpm.delete(offset_joint)\n\t\texcept:\n\t\t\tpm.warning('main position match problem')\n\t\t\ttry:\n\t\t\t\tfor control_object in brow_controls:\n\t\t\t\tjoint_target = uf.meta_traverse(source = control_object, relation = 'child', tag = 'jointSkin')[0]\n\t\t\t\tcontrol_grp = pm.ls(str(control_object).replace('_CTL','_GRP'))[0]\n\t\t\t\tprint(control_grp)\n\t\t\t\tpm.delete(control_grp, constraints = 1)\n\t\t\t\tpm.matchTransform(control_grp, joint_target, pos = True, rot = True, scale = False)\n\tif '_R_' in str(control_object):\n\t\tpm.xform(control_object, euler = True, rotation = [0,0,180])\n\t\t#rotate -r -os -fo 0 0 186.273403 -puv\n\t\ttr_constraint = pm.parentConstraint (control_object,joint_target, mo = 1, weight = 1)\n\t\ttr_constraint.setAttr('interpType', 2)\n\t\tsc_constraint = pm.scaleConstraint(control_object,joint_target, mo = 1, weight = 1)\n\t\ttr_constraint_grp = pm.parentConstraint(brow_main_control, control_grp, mo = 1, weight = 1)\n\t\ttr_constraint_grp.setAttr('interpType', 2) \n\t\tsc_constraint_grp = pm.scaleConstraint(brow_main_control, control_grp, mo = 1, weight = 1)\n\t\texcept:\n\t\t\tpm.warning('failed to match microControllers')" )
        -mip 0
        -mi "Align MicroControls" ( "#disconnect and target microController pivots\nimport pymel.core as pm\nimport rigTools\nreload(rigTools.vo_controls)\n\ncontrol_list = pm.ls(sl=1)\n\nfor item in control_list:\n    rigTools.vo_controls.match_micro(item)" )
        -mip 1
        -mi "Replace Meta Connections" ( "\n## ==== Replace meta threads ==== ##\nimport pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\nsource_joint_list = pm.ls(sl=1)\nsource_string = 'fr_Skel'\n#source_string = uf.prompt_string(promptTitle ='Source prefix', promptMessage = \"Enter source prefix to be replaced with 'Skel'\")\ntarget_string = 'skel:Skel'\n#target_string = uf.prompt_string(promptTitle ='Target prefix', promptMessage = \"Enter target prefix, probably has a colon\")\n\n\nfor item in source_joint_list:\n    parent_obj = uf.meta_traverse(source = item, relation = 'parent')\n    print parent_obj\n    \n    skel_name = str(item).replace(source_string, target_string)\n    print skel_name\n    if pm.objExists(skel_name):\n        pass\n        skel_joint = pm.ls(skel_name)[0]\n        pm.select(skel_joint)\n        if uf.meta_traverse(source = item, relation = 'parent'):\n            print 'reconnecting metaParent'\n            joint_meta_parent = uf.meta_traverse(source = item, relation = 'parent', tag = 'tracker')\n            joint_meta_parent.metaParent // item.metaParent\n            joint_meta_parent.metaParent >> skel_joint.metaParent\n        else:\n            print 'no metaParent for :: ' + str(item)\n            pass\n    else:\n        print 'no parallel object'\n        pass\n        \n" )
        -mip 2
        -mi "Match GenChar skeleton" ( "# MATCH LIST A TO LIST B\n#look into \"Longest Common Substring\" problem to attempt to automatch based on names and skip others\nimport pymel.core as pm\n\nsource_root = pm.ls(sl=1)[0]\ntarget_root = pm.ls(sl=1)[1]\n\n#source_list = targets[::2]\n#target_list = targets[1::2]\n#source_list = targets[:len(targets)//2]\n#target_list = targets[len(targets)//2:]\nsource_list = pm.ls(source_root,dag=1,ap=1,sl=0)\ntarget_list = pm.ls(target_root,dag=1,ap=1,sl=0)\n\nfor index, source_object in enumerate(source_list):\n    print(str(source_object))\n    target_object = target_list[index]\n    pm.matchTransform(source_object, target_object, pos = True, rot = True, scale = False)" )
        -mip 3
        -mi "Match to replace name" ( "# MATCH LIST A TO LIST B\n#look into \"Longest Common Substring\" problem to attempt to automatch based on names and skip others\nimport pymel.core as pm\nimport vo_usefulFunctions as uf\nreload(uf)\nsource_root = pm.ls(sl=1)[0]\ntarget_string = uf.prompt_string(promptTitle='target string', promptMessage='target string to replace for Skel')\nsource_list = pm.ls(source_root,dag=1,ap=1,sl=0)\n\nfor index, source_object in enumerate(source_list):\n    print(str(source_object))\n    target_name = str(source_object).replace('Skel', target_string)\n    target_object = pm.ls(target_name)[0]\n    pm.matchTransform(source_object, target_object, pos = True, rot = True, scale = False)" )
        -mip 4
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Show all objects" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Show All" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "All" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "menuIconDisplay.png" 
        -image1 "menuIconDisplay.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "ShowAll" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Hypergraph Hierarchy" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Hypergraph: Hierarchy" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 1 1 1 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "hypergraph.png" 
        -image1 "hypergraph.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "HypergraphHierarchyWindow" 
        -sourceType "mel" 
        -doubleClickCommand "NodeEditorWindow" 
        -commandRepeatable 1
        -flat 1
        -mi "Charcoal" ( "charcoalEditor2" )
        -mi "Maya Script Editor" ( "ScriptEditor" )
        -mi "Node Editor" ( "NodeEditorWindow" )
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 39
        -height 39
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Measure Tools" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "User Script" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "C:/Users/abogoev/Documents/maya/2018/prefs/icons/MeasureTools_icons/K_MeasureTool_SHELF_ICON.png" 
        -image1 "C:/Users/abogoev/Documents/maya/2018/prefs/icons/MeasureTools_icons/K_MeasureTool_SHELF_ICON.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "/*  Measure Tools - v2.01 ***********************************************************************************************************************************************\n     ________________________________________\n    |                                        |\n    |  Script done by: Klaudio Ladavac       |\n    |  Contact email : klaudio2u@gmail.com   |\n    |________________________________________|\n\n\n    \nLATEST RELESE/UPDATE: November 02, 2018.\n\n\nRELEASE NOTES: Available with the download. \n\n\nIMPORTANT NOTE : Please don't distribute, copy or resale the part of the code or script file(s). The only way to get the original and up to date version is \n                 only via on following link > GUMROAD > https:/gumroad.com/klaudio2u\n\n\n\n- DISCLAIMER -\nTHE SCRIPT IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND. KLADUIO LADAVAC DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES INCLUDING, \nBUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE, OR TRADE \nPRACTICE. IN NO EVENT WILL KLAUDIO LADAVAC BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF \nKLAUDIO LADAVAC HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.   \n****************************************************************************************************************************************************************/\n\n\n\n// SAVED SETTINGS  ------------------------------------------------------------------------------------------------------------------------------------------------------\nif (!`optionVar -ex \"MTconvertUnitsToggle\"`){ optionVar -iv \"MTconvertUnitsToggle\" 0; }        // If nothing is set - deafult - closed unit covert tab\n\n\n// X distance and locator - (default RED)\nif (!`optionVar -ex \"distColor_xSet\"`) { optionVar -fv \"distColor_xSet\" 1; optionVar -fva \"distColor_xSet\" 0.176; optionVar -fva \"distColor_xSet\" 0.180; }\nif (!`optionVar -ex \"locColor_xSet\"`) { optionVar -fv \"locColor_xSet\" 1; optionVar -fva \"locColor_xSet\" 0.176; optionVar -fva \"locColor_xSet\" 0.180; }\n// Y distance and locator - (default GREEN)\nif (!`optionVar -ex \"distColor_ySet\"`) { optionVar -fv \"distColor_ySet\" 0.005; optionVar -fva \"distColor_ySet\" 0.599; optionVar -fva \"distColor_ySet\" 0.139; }\nif (!`optionVar -ex \"locColor_ySet\"`) { optionVar -fv \"locColor_ySet\" 0.005; optionVar -fva \"locColor_ySet\" 0.599; optionVar -fva \"locColor_ySet\" 0.139; }\n// Z distance and locator - (default BLUE)\nif (!`optionVar -ex \"distColor_zSet\"`) { optionVar -fv \"distColor_zSet\" 0.077; optionVar -fva \"distColor_zSet\" 0.359; optionVar -fva \"distColor_zSet\" 1; }\nif (!`optionVar -ex \"locColor_zSet\"`) { optionVar -fv \"locColor_zSet\" 0.077; optionVar -fva \"locColor_zSet\" 0.359; optionVar -fva \"locColor_zSet\" 1; }\n// ALL distance and locator - (default WHITE)\nif (!`optionVar -ex \"distColor_allSet\"`) { optionVar -fv \"distColor_allSet\" 0.870; optionVar -fva \"distColor_allSet\" 0.870; optionVar -fva \"distColor_allSet\" 0.870; }\nif (!`optionVar -ex \"locColor_allSet\"`) { optionVar -fv \"locColor_allSet\" 0.870; optionVar -fva \"locColor_allSet\" 0.870; optionVar -fva \"locColor_allSet\" 0.870; }\n\n\nif (!`optionVar -ex \"locScale_DSet\"`){ optionVar -fv \"locScale_DSet\" 0.4; }     // Loc Scale - Default                    \nif (!`optionVar -ex \"locScale_CSet\"`){ optionVar -fv \"locScale_CSet\" 0.05; }    // Loc Scale - Constrain\n\n\n// Turn ON \"trackSelectionOrder\" option in preferences > used for Angle calculation and distance tool positioning. It is turned OFF when you close the measure tools UI (window -closeCommand)\nselectPref -trackSelectionOrder true;\n// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n\n// START UI ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nif ( `window -exists UnitConvert` ) { deleteUI UnitConvert; }                                   \nwindow -tlb 1 -t \"Measure Tools\" -closeCommand \"selectPref -trackSelectionOrder false;\" UnitConvert;\ncolumnLayout -w 292 mainUILayout;\n        \n        // main menus\n        string $menuBarLayoutMt = `menuBarLayout  mainMt`;\n        menu -label \"Options\" -parent mainMt -to 1 optionsMT;\n            menuItem -divider true -dividerLabel \"Locators Selection\";\n            menuItem -label \"Selected        \" -image \"newRenderPass.png\" -c \"locFromSelected();\" selectedMt;\n            menuItem -label \"Global       \" -image \"newRenderPassSet.png\" -c \"locGlobalSelect();\" allMT;\n            menuItem -divider true;\n            menuItem -label \"Quick Auto UV\" -c \"quickAutoUVLayout();\";\n            menuItem -divider true;   \n            menuItem -label \"Preferences ...   \" -image \"hotkeySetSettings.png\" -c \"source \\\"measurePreferencesUI.mel\\\"; measurePreferencesUI();\";\n        menu -label \"Help\" -parent mainMt -to 1 helpMT;\n            menuItem -divider true -dividerLabel \"Tutorials\";\n            menuItem -label \"Measure Tools > Overview - v2.0 \" -c \"getTutsOverviewV2_0();\";     \n            menuItem -divider true -dividerLabel \"Maya Scripts\";\n            menuItem -label \"Gumroad\" -c \"scriptsGumroad();\";\n            menuItem -divider true -dividerLabel \"Contact\";  \n            menuItem -label \"Facebook\" -c \"webFacebook();\";  \n            menuItem -label \"ArtStation (portfolio)\" -c \"webArtStation();\"; \n            menuItem -divider true -dividerLabel \"E-Mail\";\n            menuItem -label \"klaudio2u@gmail.com\" -c (\"warning -n \\\" > Mouse drag to highlight and CTRL+C to copy this E-Mail to clipboard >>> klaudio2u@gmail.com\\\"\"); \n         \n        separator -height 1 -style \"none\";\n  \n        // Measure Tools\n        formLayout -h 84 -w 285 -numberOfDivisions 100 distanceCheck;  \n            text -label \"\" -al \"left\" -h 2 -w 286 -backgroundColor 0.25 0.25 0.25 bkgColorLine;  \n            text -label \"\" -al \"left\" -h 75 -w 286 -backgroundColor 0.25 0.25 0.25 bkgColorMDtools;  \n\n\n\n            // Quick Distance and Angle\n            string $versionChks = `about -v`;  // chech version because -hlc doesn't work in Maya 2016\n            if ($versionChks == \"2018\") {\n                textField -bgc 0.2 0.2 0.2 -hlc 0.28 0.28 0.28 -ed true -h 27 -w 83 -pht \"< Distance\" distanceFiled;\n                textField -bgc 0.2 0.2 0.2 -hlc 0.28 0.28 0.28 -ed true -h 27 -w 83 -pht \"< Angle\"  angleFiled;\n            }\n            else {\n                textField -bgc 0.2 0.2 0.2  -ed true -h 27 -w 83 -pht \"< Distance\" distanceFiled;\n                textField -bgc 0.2 0.2 0.2  -ed true -h 27 -w 83 -pht \"< Angle\"  angleFiled;                \n            }\n\n\n            iconTextButton -image1 \"MeasureTools_icons/K_MeasureTool.png\" -c \"distanceToolSelVert();\" -rpt 1 distanceBUtton;        \n            iconTextButton -image1 \"MeasureTools_icons/K_MeasureTool_angle.png\" -c \"selectAngleSelected();\" -rpt 1 \n                           -ann \"LMB             >> Calculate the angle between 3 selected vertices. \\nShift+LMB  >> Convert the angle already in the field as 360 degrees.\" angleBUtton;  \n            \n            // Create Distance tool buttons\n            iconTextButton -image1 \"MeasureTools_icons/K_MeasureTool2.png\" -c \"createDistanceTool();\" -rpt 1 distanceToolBUtton;\n            iconTextCheckBox -v 1 -st \"iconOnly\" -w 20 -h 26 -mw 0 -mh 0 -i1 \"MeasureTools_icons/K_MeasureTool_Const.png\" constrainOnOff; \n            // Clear buttons\n            iconTextButton -image1 \"MeasureTools_icons/K_MeasureTool_ClearAll2.png\" -c \"clearAllDistanceTools();\" -ann \"Delete All - delete all distance tools in the scene.\" clearAllBUtton;  \n            iconTextButton -image1 \"MeasureTools_icons/K_MeasureTool_ClearSelected.png\" -c \"clearSelectedDistance();\" -ann \"Delete Selected - delete only selected.\" clearSelectedBUtton;\n\n\n            // Axis constrain button\n            rowColumnLayout -numberOfColumns 5 radioButtonsM;\n              iconTextRadioCollection itRadCollectConstraint;    \n                iconTextRadioButton -sl -st \"iconOnly\" -w 33 -h 24 -mw 0 -mh 0 -i1 \"MeasureTools_icons/K_MeasureTool_axisAll_On.png\" -onc \"changeIconsAll();\"  axisConstAll;  \n                separator -w 6 -style \"none\" -backgroundColor 0.25 0.25 0.25;      \n                iconTextRadioButton -st \"iconOnly\" -w 23 -h 24 -mw 0 -mh 0 -i1 \"MeasureTools_icons/K_MeasureTool_axisX_Off.png\"  -onc \"changeIconsX();\" axisConstX;         \n                iconTextRadioButton -st \"iconOnly\" -w 23 -h 24 -mw 0 -mh 0 -i1 \"MeasureTools_icons/K_MeasureTool_axisY_Off.png\"  -onc \"changeIconsY();\" axisConstY; \n                iconTextRadioButton -st \"iconOnly\" -w 23 -h 24 -mw 0 -mh 0 -i1 \"MeasureTools_icons/K_MeasureTool_axisZ_Off.png\"  -onc \"changeIconsZ();\" axisConstZ;             \n            setParent ..;\n            \n         \n        formLayout -edit\n             -attachForm bkgColorLine \"top\" 0         -attachForm bkgColorLine \"left\" 1\n             -attachForm bkgColorMDtools \"top\" 4      -attachForm bkgColorMDtools \"left\" 1 \n             -attachForm distanceToolBUtton \"top\" 45   -attachForm distanceToolBUtton \"left\" 6\n             -attachForm constrainOnOff \"top\" 46      -attachForm constrainOnOff \"left\" 52                \n             -attachForm distanceFiled \"top\" 10       -attachForm distanceFiled \"left\" 53\n             -attachForm distanceBUtton \"top\" 9       -attachForm distanceBUtton \"left\" 6   \n             -attachForm angleFiled \"top\" 10       -attachForm angleFiled \"left\" 196\n             -attachForm angleBUtton \"top\" 9       -attachForm angleBUtton \"left\" 149                 \n             -attachForm radioButtonsM \"top\" 48        -attachForm radioButtonsM \"left\" 85\n             // Clear\n             -attachForm clearSelectedBUtton \"top\" 46       -attachForm clearSelectedBUtton \"left\" 224\n             -attachForm clearAllBUtton \"top\" 46            -attachForm clearAllBUtton \"left\" 251\n             distanceCheck;\n        setParent ..; \n               \n        separator -height 4 -style \"none\";\n        \n        // Unit convert - drop down toggle\n        int $MTunitToggle = `optionVar -q \"MTconvertUnitsToggle\"`;\n        formLayout -h 16 -w 285 -numberOfDivisions 100 unitConvertToggle; \n              text -label \"\" -al \"left\" -h 16 -w 284 -backgroundColor 0.25 0.25 0.25 bkgUnitToggle;\n              text -label \"Units Convert\" -al \"left\" -fn \"smallPlainLabelFont\" txtColorMDunits;\n              \n              \n              if ($MTunitToggle == 0 )\n              {\n                    iconTextButton -image1 \"MeasureTools_icons/K_MeasureTool_unitsToggle_off.png\" -c \"toggleUnitConverUI();\" toggleUnitConcButton;\n              }\n              if ($MTunitToggle == 1 )\n              {\n                    iconTextButton -image1 \"MeasureTools_icons/K_MeasureTool_unitsToggle_on.png\" -c \"toggleUnitConverUI();\" toggleUnitConcButton;\n              }     \n                   \n        formLayout -edit\n          -attachForm bkgUnitToggle \"top\" 1   -attachForm bkgUnitToggle \"left\" 2\n          -attachForm txtColorMDunits \"top\" 2   -attachForm txtColorMDunits \"left\" 25\n          -attachForm toggleUnitConcButton \"top\" 2   -attachForm toggleUnitConcButton \"left\" 0\n        unitConvertToggle; \n        setParent ..;   \n  \n             \n        // Unit convert - measures\n       columnLayout unitConvert_attach_UI;\n       if ($MTunitToggle == 1 )\n       {   \n            formLayout -h 118 -w 285 -numberOfDivisions 100 unitConvertUI; \n            text -label \"\" -al \"left\" -h 116 -w 286 -backgroundColor 0.25 0.25 0.25 bkgUnitsConvert;\n                  iconTextRadioCollection itRadCollect;    \n                    iconTextRadioButton -st \"iconOnly\" -w 46 -h 14 -mw 0 -mh 0 -i1 \"MeasureTools_icons/K_MeasureTool_mm.png\" -onc \"mmLayout();\"  orientXplus;         \n                    iconTextRadioButton -st \"iconOnly\" -w 46 -h 14 -mw 0 -mh 0 -i1 \"MeasureTools_icons/K_MeasureTool_cm.png\" -onc \"cmLayout();\" orientXplus2;         \n                    iconTextRadioButton -sl -st \"iconOnly\" -w 46 -h 14 -mw 0 -mh 0 -i1 \"MeasureTools_icons/K_MeasureTool_m.png\" -onc \"mLayout();\" orientXplus3;    \n               \n                    // inch > meter\n                        text -l \" Inches  \" labelInches;\n                        floatField -bgc 0.2 0.2 0.2 -pre 3 -w 70  -cc \"inputInchesMeter();\" inchesInput;\n                        text -l \"  =  \" labelEqual1;\n                        text -l \"Meter  \" labelMeter1;\n                        floatField -bgc 0.2 0.2 0.2 -pre 3 -w 70 -cc \"inputMeterInches();\" meter1Input;\n                    // feet > meter\n                        text -l \" Feet  \" labelFeet;\n                        floatField -bgc 0.2 0.2 0.2 -pre 3 -w 70  -cc \"inputFeetMeter();\" feetInput;\n                        text -l \"  =  \" labelEqual2;\n                        text -l \"Meter  \" labelMeter2;\n                        floatField -bgc 0.2 0.2 0.2 -pre 3 -w 70 -cc \"inputMeterFeet();\" meter2Input;  \n                    // yard > meter\n                        text -l \"Yards  \" labelYards;\n                        floatField -bgc 0.2 0.2 0.2 -pre 3 -w 70  -cc \"inputYardsMeter();\" yardsInput;\n                        text -l \"  =  \" labelEqual3;\n                        text -l \"Meter  \" labelMeter3;\n                        floatField -bgc 0.2 0.2 0.2 -pre 3 -w 70 -cc \"inputMeterYards();\" meter3Input;                  \n               \n               formLayout -edit\n                 -attachForm bkgUnitsConvert \"top\" 0   -attachForm bkgUnitsConvert \"left\" 1\n                 -attachForm orientXplus \"top\" 8   -attachForm orientXplus \"left\" 128\n                 -attachForm orientXplus2 \"top\" 8  -attachForm orientXplus2 \"left\" 178\n                 -attachForm orientXplus3 \"top\" 8  -attachForm orientXplus3 \"left\" 228\n                 // inch > meter\n                 -attachForm inchesInput \"top\" 34  -attachForm inchesInput \"left\" 50\n                 -attachForm labelInches \"top\" 37  -attachForm labelInches \"left\" 8\n                 -attachForm labelEqual1 \"top\" 37   -attachForm labelEqual1 \"left\" 125\n                 -attachForm labelMeter1 \"top\" 37   -attachForm labelMeter1 \"left\" 171\n                 -attachForm meter1Input \"top\" 34  -attachForm meter1Input \"left\" 205\n                 // feet > meter\n                 -attachForm feetInput \"top\" 59    -attachForm feetInput \"left\" 50 \n                 -attachForm labelFeet \"top\" 62    -attachForm labelFeet \"left\" 19\n                 -attachForm labelEqual2 \"top\" 62   -attachForm labelEqual2 \"left\" 125\n                 -attachForm labelMeter2 \"top\" 62   -attachForm labelMeter2 \"left\" 171\n                 -attachForm meter2Input \"top\" 59  -attachForm meter2Input \"left\" 205                     \n                 // yard > meter\n                 -attachForm yardsInput \"top\" 85   -attachForm yardsInput \"left\" 50\n                 -attachForm labelYards \"top\" 88   -attachForm labelYards \"left\" 19\n                 -attachForm labelEqual3 \"top\" 88   -attachForm labelEqual3 \"left\" 125\n                 -attachForm labelMeter3 \"top\" 88   -attachForm labelMeter3 \"left\" 171\n                 -attachForm meter3Input \"top\" 85  -attachForm meter3Input \"left\" 205           \n                 unitConvertUI; \n               setParent ..;\n       \n       }\n       setParent ..;\n\n\nshowWindow UnitConvert;\nsetFocus UnitConvert;\n\n\nif ($MTunitToggle == 0 )\n{ \n    window -e -h 137 UnitConvert;\n}\n\n\n// END UI --------------------------------------------------------------------------------------\n\n\n\n\n////////////////////////////////////////////////////\n // To Millimeters\n////////////////////////////////////////////////////\n\n\n// Inches > Millimeter\nproc inputInchesMilli()\n{\n    float $getInputInch3 = `floatField -query -v inchesInput`;\n    \n    float $milliI = $getInputInch3 * 25.4;\n    floatField -e -v $milliI meter1Input; \n}\n\n\n// Millimeter > Inches\nproc inputMilliInches()\n{\n    float $getInputMilli1 = `floatField -query -v meter1Input`;\n    \n    float $inchesM = $getInputMilli1 * 0.03937008;\n    floatField -e -v $inchesM inchesInput; \n}\n\n\n// Feet > Millimeter\nproc inputFeetMilli()\n{\n    float $getInputFeet3 = `floatField -query -v feetInput`;\n\n\n    float $milliF = $getInputFeet3 * 304.8;\n    floatField -e -v $milliF meter2Input;\n    \n}\n\n\n// Millimeter > Feet\nproc inputMilliFeet()\n{\n    float $getInputMilli2 = `floatField -query -v meter2Input`;\n    \n    float $feetsM = $getInputMilli2 * 0.00328084;\n    floatField -e -v $feetsM feetInput;\n    \n}\n\n\n// Yards > Millimeter\nproc inputYardsMilli()\n{\n    float $getInputYards3 = `floatField -query -v yardsInput`;\n\n\n    float $milliY = $getInputYards3 * 914.4;\n    floatField -e -v $milliY meter3Input;\n    \n}\n\n\n// Millimeter > Yards\nproc inputMilliYards()\n{\n    float $getInputMilli3 = `floatField -query -v meter3Input`;\n    \n    float $yardsM = $getInputMilli3 * 0.00109361;\n    floatField -e -v $yardsM yardsInput;\n    \n}\n\n\n////////////////////////////////////////////////////\n // To Centimeters\n////////////////////////////////////////////////////\n\n\n// Inches > Centimeter\nproc inputInchesCenti()\n{\n    float $getInputInch2 = `floatField -query -v inchesInput`;\n    \n    float $centiI = $getInputInch2 * 2.54;\n    floatField -e -v $centiI meter1Input; \n}\n\n\n// Centimeter > Inches\nproc inputCentiInches()\n{\n    float $getInputCenti1 = `floatField -query -v meter1Input`;\n    \n    float $inchesC = $getInputCenti1 * 0.39370079;\n    floatField -e -v $inchesC inchesInput; \n}\n\n\n// Feet > Centimeter\nproc inputFeetCenti()\n{\n    float $getInputFeet2 = `floatField -query -v feetInput`;\n\n\n    float $centiF = $getInputFeet2 * 30.48;\n    floatField -e -v $centiF meter2Input;\n    \n}\n\n\n// Centimeter > Feet\nproc inputCentiFeet()\n{\n    float $getInputCenti2 = `floatField -query -v meter2Input`;\n    \n    float $feetsC = $getInputCenti2 * 0.0328084;\n    floatField -e -v $feetsC feetInput;\n    \n}\n\n\n// Yards > Centimeter\nproc inputYardsCenti()\n{\n    float $getInputYards2 = `floatField -query -v yardsInput`;\n\n\n    float $centiY = $getInputYards2 * 91.44;\n    floatField -e -v $centiY meter3Input;\n    \n}\n\n\n// Centimeter > Yards\nproc inputCentiYards()\n{\n    float $getInputCenti3 = `floatField -query -v meter3Input`;\n    \n    float $yardsC = $getInputCenti3 * 0.01093613;\n    floatField -e -v $yardsC yardsInput;\n    \n}\n\n\n////////////////////////////////////////////////////\n // To Meters\n////////////////////////////////////////////////////\n\n\n// Inches > Meter\nproc inputInchesMeter()\n{\n    float $getInputInch = `floatField -query -v inchesInput`;\n    \n    float $meterI = $getInputInch * 0.0254;\n    floatField -e -v $meterI meter1Input; \n}\n\n\n// Meter > Inches\nproc inputMeterInches()\n{\n    float $getInputMeter1 = `floatField -query -v meter1Input`;\n    \n    float $inchesM = $getInputMeter1 * 39.37007874;\n    floatField -e -v $inchesM inchesInput; \n}\n\n\n// Feet > Meter\nproc inputFeetMeter()\n{\n    float $getInputFeet = `floatField -query -v feetInput`;\n\n\n    float $metersF = $getInputFeet * 0.3048;\n    floatField -e -v $metersF meter2Input;\n    \n}\n\n\n// Meter > Feet\nproc inputMeterFeet()\n{\n    float $getInputMeter2 = `floatField -query -v meter2Input`;\n    \n    float $feetsM = $getInputMeter2 * 3.2808399;\n    floatField -e -v $feetsM feetInput;\n    \n}\n\n\n// Yards > Meter\nproc inputYardsMeter()\n{\n    float $getInputYards = `floatField -query -v yardsInput`;\n\n\n    float $metersY = $getInputYards * 0.9144;\n    floatField -e -v $metersY meter3Input;\n    \n}\n\n\n// Meter > Yards\nproc inputMeterYards()\n{\n    float $getInputMeter3 = `floatField -query -v meter3Input`;\n    \n    float $yardsM = $getInputMeter3 * 1.0936133;\n    floatField -e -v $yardsM yardsInput;\n    \n}\n\n\n\n// Select Locator - from selected only\nproc locFromSelected()\n{\n    string $saveArray_DT;    \n    string $locSel[];\n\n\n    // get selected distance tools\n    string $distToolSel[] = `ls -sl -tr`;\n        \n                // check if anything is selected\n                if (size($distToolSel) == 0)\n                {\n                     warning -n  \" -- INFO -- Nothing is selected! Select one or more DISTANCE TOOLS!\"; \n                     return;\n                }\n                // check if correct objects are selected\n                for ($h=0; $h < size($distToolSel); $h++ ) \n                { \n                    if ( gmatch($distToolSel[$h], \"*_distanceMeasure*\") != 1) \n                    {\n                        warning -n  \" -- INFO -- Select first one or more DISTANCE TOOLS!\"; \n                        return;\n                    }\n                }  \n        \n        \n        \n    // get all and select the locators     \n    for ($eachDT in $distToolSel)\n    {\n        string $sel2[] = `listRelatives -s $eachDT`;\n        string $fSelection[] = `listConnections -d 1 $sel2[0]`;\n        \n        $saveArray_DT += (\" \" + $fSelection[0] + \" \" + $fSelection[1]);\n    }\n    \n    $locSel = stringToStringArray($saveArray_DT, \" \"); \n    $saveArray_DT = \"\";  \n     \n    select -r $locSel;\n    ScaleTool;\n}\n\n\n\n// Select locators - Global - all in the scene\nproc locGlobalSelect()\n{\n    string $getAllDistanceNodesSel[] = `ls -type distanceDimShape`;\n\n\n    string $getAllLocators[] = `listConnections -d 1 $getAllDistanceNodesSel`;\n    select -r $getAllLocators; \n    ScaleTool;\n}\n\n\n// Quick Auto UV - menu option used to quick layout UVs after modifing the object or/and if they intersect (becaue of Point on Poly constraint).\nproc quickAutoUVLayout()\n{\n    string $getObjectPreUV[] = `ls -sl -tr`;\n    for ($eachUV in $getObjectPreUV)\n    {\n        select $eachUV;\n        polyAutoProjection -lm 0 -pb 0 -ibd 1 -cm 0 -l 2 -sc 1 -o 1 -p 6 -ps 0.2 -ws 0 -ch 0;\n    }\n    \n    select -r $getObjectPreUV;\n    print  \" -- INFO -- Automatic UV -- DONE! \";\n    \n} \n\n\n// Clear / Delete All Distance Tools\nproc clearAllDistanceTools()\n{\n       string $getAllDistanceNodes[] = `ls -type distanceDimShape`;\n        \n           if (size ($getAllDistanceNodes) == 0 ) \n           {    \n                  warning -n  \" -- INFO -- All ?Distance Tools` deleted! \"; \n                  return;\n           }\n           \n           else \n           {\n                  string $listAll[] = `listHistory $getAllDistanceNodes`; \n                  string $listAllTransforms[] = `listRelatives -p $listAll`; \n                  delete $listAllTransforms;   \n           }  \n}\n\n\n\n// Clear / Delete SELECTED Distance Tools\nproc clearSelectedDistance()\n{\n        // check is selected - it has to be only Distance Tools - else stop the command\n        string $checkIfSelected[] = `ls -sl -fl`; \n           \n            // check if anything is selected\n            if (size($checkIfSelected) == 0)\n            {\n                 warning -n  \" -- INFO -- Nothing is selected! Select one or more DISTANCE TOOLS to delete!\"; \n                 return;\n            }\n            \n            // check if correct objects are selected\n            for ($i=0; $i < size($checkIfSelected); $i++ ) \n            { \n                if ( gmatch($checkIfSelected[$i], \"*distanceMeasure*\") != 1) \n                {\n                    warning -n  \" -- INFO -- Select only one or more DISTANCE TOOLS to delete!\"; \n                    return;\n                }\n            } \n        \n        \n        \n        // get all and delete\n        string $distToolsSel[] = `ls -sl -tr`;\n        for ($eachD in $distToolsSel)\n        {\n            string $sel1[] = `listRelatives -s $eachD`;\n            string $fSelection[] = `listConnections -d 1 $sel1[0]`;\n            \n            delete $eachD $fSelection;\n        }\n\n\n}\n \n \n// Distance Measure\nproc distanceToolSelVert()\n{\n    if (size(`filterExpand -sm 31`) == 2)\n    {\n        \n            string $selVertices[] = `ls -sl -fl`;\n\n\n            vector $a = `pointPosition -w $selVertices[0]`;\n            vector $b = `pointPosition -w $selVertices[1]`;\n            vector $mathVectors = $b - $a;            \n            float $lengthBetween = `mag $mathVectors`;\n            \n            // shorten to 3 decimal numbers ( 10= 1 decimal, 100= 2 decimal....etc.)\n            float $lengthBetween_short = `trunc($lengthBetween * 1000)` / 1000;\n                             \n            textField -e -tx $lengthBetween_short distanceFiled;  // Print distance between in field                      \n\n\n            print \"Measure - Done!\";            \n    \n    } \n    else \n    {\n           warning -n  \" -- INFO -- Select 2 vertices to be able to quick measure the distance! \"; \n           return;  \n    }\n    \n    setFocus UnitConvert; \n}\n\n\n// Distance Tool\nproc createDistanceTool()\n{\n    int $getOnX = `iconTextRadioButton -q -sl axisConstX`;\n    int $getOnY = `iconTextRadioButton -q -sl axisConstY`;\n    int $getOnZ = `iconTextRadioButton -q -sl axisConstZ`;\n    int $getOnAll = `iconTextRadioButton -q -sl axisConstAll`;            \n\n\n    // Check if two vertices are selected\n    if (size(`filterExpand -sm 31`) == 2)\n    {          \n\n\n                    \n                string $selObject1[] = `ls -hilite`; \n                string $selLockVertices2[] = `ls -os -fl`;   // order selection on it wil return correct selections order for placing the distance tool\n                 \n                // get position of selected vertices \n                float $firstSelVerice1[] = `xform -q -t -ws $selLockVertices2[0]`;\n                float $secondSelVerice1[] = `xform -q -t -ws $selLockVertices2[1]`;\n                 \n                // create Distance Tool as fixed position (this is to avoid distance tool to use same locator if created at selected vertices immediatelly) \n                distanceDimension -sp 0 0 0  -ep 0 0 1;\n                   \n                // get requred nodes   \n                string $getObjects1[] = `ls -sl`;\n                select -r -ne $getObjects1[1];\n                $selectedDs1 = `ls -sl -dag -leaf`; \n                string $list1[] = `listHistory $selectedDs1`; \n                string $listTransforms1[] = `listRelatives -p $list1`; \n                \n                if ($getOnX == 1)  // move locator along X \n                {\n                    xform -t $firstSelVerice1[0] $firstSelVerice1[1] $firstSelVerice1[2] -ws $listTransforms1[1];\n                    xform -t $secondSelVerice1[0] $firstSelVerice1[1] $firstSelVerice1[2] -ws $listTransforms1[2]; \n                }\n                if ($getOnY == 1)  // move locator along Y \n                {\n                    xform -t $firstSelVerice1[0] $firstSelVerice1[1] $firstSelVerice1[2] -ws $listTransforms1[1];\n                    xform -t $firstSelVerice1[0] $secondSelVerice1[1] $firstSelVerice1[2] -ws $listTransforms1[2]; \n                }\n                if ($getOnZ == 1)  // move locator along Z\n                {\n                    xform -t $firstSelVerice1[0] $firstSelVerice1[1] $firstSelVerice1[2] -ws $listTransforms1[1];\n                    xform -t $firstSelVerice1[0] $firstSelVerice1[1] $secondSelVerice1[2] -ws $listTransforms1[2]; \n                }\n                if ($getOnAll == 1)  // move locator along ALL - XYZ\n                {\n                    xform -t $firstSelVerice1[0] $firstSelVerice1[1] $firstSelVerice1[2] -ws $listTransforms1[1];\n                    xform -t $secondSelVerice1[0] $secondSelVerice1[1] $secondSelVerice1[2] -ws $listTransforms1[2];\n                }\n     \n             // Use PointOnPoly constrain if chececk   \n             int $getValueConst = `iconTextCheckBox -q -v constrainOnOff`;    \n             if ( $getValueConst == 1)\n             {\n                if ($getOnX == 1)  // constrain X\n                {   \n                    select -r $selLockVertices2[0]; \n                    select -add $listTransforms1[1];\n                    doCreatePointOnPolyConstraintArgList 2 { \"0\" ,\"1\" ,\"1\" ,\"1\" ,\"\" ,\"1\" ,\"0\" ,\"0\" ,\"0\" ,\"0\" }; \n                   \n                    select -r $selLockVertices2[1]; \n                    select -add $listTransforms1[2]; \n                    doCreatePointOnPolyConstraintArgList 2 { \"0\" ,\"1\" ,\"1\" ,\"1\" ,\"\" ,\"1\" ,\"0\" ,\"0\" ,\"0\" ,\"0\" }; \n                } \n                if ($getOnY == 1)  // constrain Y\n                {   \n                    select -r $selLockVertices2[0]; \n                    select -add $listTransforms1[1];\n                    doCreatePointOnPolyConstraintArgList 2 {   \"1\" ,\"0\" ,\"1\" ,\"1\" ,\"\" ,\"1\" ,\"0\" ,\"0\" ,\"0\" ,\"0\" };\n                   \n                    select -r $selLockVertices2[1]; \n                    select -add $listTransforms1[2]; \n                    doCreatePointOnPolyConstraintArgList 2 {   \"1\" ,\"0\" ,\"1\" ,\"1\" ,\"\" ,\"1\" ,\"0\" ,\"0\" ,\"0\" ,\"0\" }; \n                } \n                if ($getOnZ == 1)  // constrain Z\n                {   \n                    select -r $selLockVertices2[0]; \n                    select -add $listTransforms1[1];\n                    doCreatePointOnPolyConstraintArgList 2 {   \"1\" ,\"1\" ,\"0\" ,\"1\" ,\"\" ,\"1\" ,\"0\" ,\"0\" ,\"0\" ,\"0\" };\n                   \n                    select -r $selLockVertices2[1]; \n                    select -add $listTransforms1[2]; \n                    doCreatePointOnPolyConstraintArgList 2 {   \"1\" ,\"1\" ,\"0\" ,\"1\" ,\"\" ,\"1\" ,\"0\" ,\"0\" ,\"0\" ,\"0\" };\n                }  \n                if ($getOnAll == 1)  // constrain ALL - XYZ\n                {   \n                    select -r $selLockVertices2[0]; \n                    select -add $listTransforms1[1]; \n                    doCreatePointOnPolyConstraintArgList 2 { \"0\" ,\"0\" ,\"0\" ,\"1\" ,\"\" ,\"1\" ,\"0\" ,\"0\" ,\"0\" ,\"0\" };  \n                   \n                    select -r $selLockVertices2[1]; \n                    select -add $listTransforms1[2]; \n                    doCreatePointOnPolyConstraintArgList 2 { \"0\" ,\"0\" ,\"0\" ,\"1\" ,\"\" ,\"1\" ,\"0\" ,\"0\" ,\"0\" ,\"0\" }; \n                }\n                \n                // Option to Hide locators when usinf constraints\n                //hide $listTransforms1[1] $listTransforms1[2];\n\n\n             }\n             \n             \n\n\n            // Distance Color - get saved values and set them\n            float $distColor_xSet_q[] = `optionVar -q \"distColor_xSet\"`; \n            float $distColor_ySet_q[] = `optionVar -q \"distColor_ySet\"`;\n            float $distColor_zSet_q[] = `optionVar -q \"distColor_zSet\"`;\n            float $distColor_allSet_q[] = `optionVar -q \"distColor_allSet\"`;\n            \n                setAttr ($listTransforms1[0] +\".overrideEnabled\") 1 ;\n                setAttr ($listTransforms1[0] + \".overrideRGBColors\") 1 ;     \n            \n            if ($getOnX == 1)  // If X - make distance tool RED \n            {\n                setAttr ($listTransforms1[0] + \".overrideColorRGB\") $distColor_xSet_q[0] $distColor_xSet_q[1] $distColor_xSet_q[2]; \n                rename $listTransforms1[0] _X_distanceMeasure;                \n            }  \n            if ($getOnY == 1)  // If Y - make distance tool GREEN \n            {\n                setAttr ($listTransforms1[0] + \".overrideColorRGB\") $distColor_ySet_q[0] $distColor_ySet_q[1] $distColor_ySet_q[2]; \n                rename $listTransforms1[0] _Y_distanceMeasure;         \n            }         \n            if ($getOnZ == 1)  // If Z - make distance tool BLUE \n            {\n                setAttr ($listTransforms1[0] + \".overrideColorRGB\") $distColor_zSet_q[0] $distColor_zSet_q[1] $distColor_zSet_q[2]; \n                rename $listTransforms1[0] _Z_distanceMeasure;\n            }  \n            if ($getOnAll == 1)  // If All - make distance tool WHITE \n            {\n                setAttr ($listTransforms1[0] + \".overrideColorRGB\") $distColor_allSet_q[0] $distColor_allSet_q[1] $distColor_allSet_q[2];\n                rename $listTransforms1[0] _ALL_distanceMeasure; \n            }          \n                \n\n\n\n            // Locator Scale and Color - get saved value\n            float $locScale_DSave_q = `optionVar -q \"locScale_DSet\"`;   \n            float $locScale_CSave_q = `optionVar -q \"locScale_CSet\"`;  \n            float $locColor_xSet_q[] = `optionVar -q \"locColor_xSet\"`;\n            float $locColor_ySet_q[] = `optionVar -q \"locColor_ySet\"`;\n            float $locColor_zSet_q[] = `optionVar -q \"locColor_zSet\"`;\n            float $locColor_allSet_q[] = `optionVar -q \"locColor_allSet\"`;\n             \n            select -r $listTransforms1[1] $listTransforms1[2];\n            string $selLocatorColor[] = `ls -sl -tr`;\n            for ($eachSelLoc in $selLocatorColor)\n            {\n                setAttr ($eachSelLoc +\".overrideEnabled\") 1 ;\n                setAttr ($eachSelLoc + \".overrideRGBColors\") 1 ;\n                \n                if ( $getValueConst == 1)\n                {\n                    setAttr ($eachSelLoc + \".scale\") $locScale_CSave_q $locScale_CSave_q $locScale_CSave_q; \n                } \n                if ( $getValueConst == 0)\n                {\n                    setAttr ($eachSelLoc + \".scale\") $locScale_DSave_q $locScale_DSave_q $locScale_DSave_q; \n                }         \n                \n                // Colorize Locators the same as distance colors\n                if ($getOnX == 1)  // If X - make distance tool RED (def - 1 0.176 0.180)\n                {\n                    setAttr ($eachSelLoc + \".overrideColorRGB\") $locColor_xSet_q[0] $locColor_xSet_q[1] $locColor_xSet_q[2]; \n                }  \n                if ($getOnY == 1)  // If Y - make distance tool GREEN (def - 0.005 0.599 0.139)\n                {\n                    setAttr ($eachSelLoc + \".overrideColorRGB\") $locColor_ySet_q[0] $locColor_ySet_q[1] $locColor_ySet_q[2]; \n                }         \n                if ($getOnZ == 1)  // If Z - make distance tool BLUE (def - 0.077 0.359 1)\n                {\n                    setAttr ($eachSelLoc + \".overrideColorRGB\") $locColor_zSet_q[0] $locColor_zSet_q[1] $locColor_zSet_q[2]; \n                }  \n                if ($getOnAll == 1)  // If All - make distance tool WHITE (def- 0.870 0.870 0.870)\n                {\n                    setAttr ($eachSelLoc + \".overrideColorRGB\") $locColor_allSet_q[0] $locColor_allSet_q[1] $locColor_allSet_q[2]; \n                } \n            }\n            select -cl;\n            \n            // keep selection - still in vertice component mode\n            select -r $selObject1;\n            setSelectMode components Components; selectType -smp 1 -sme 0 -smf 0 -smu 0 -pv 1 -pe 0 -pf 0 -puv 0;\n            select -cl;\n            \n            print \"Distance Tool - Created!\";\n            \n    }\n    else\n    {\n           warning -n  \" -- INFO -- Select 2 vertices to be able to create distance/measure tool! \"; \n           return;  \n    }         \n}\n\n\n\n// Calculate the Angle and print it into the field\nproc selectAngleSelected()\n{\n    int $chkModifierPress = `getModifiers`;\n    \n            // LMB + click on the button will calculate the angle between 3 vertices. (Ordered selection must be ON)\n            if ( $chkModifierPress == 0 ) \n            {     \n                if (size (`ls -sl -fl`) == 3 ) \n                {\n                    // get vertices and calcualte the angle\n                    string $vertsSelection[]= `ls -os -fl`;\n\n\n                    float $vert_org[] = `pointPosition -w $vertsSelection[0]`; \n                    vector $O = <<$vert_org[0],$vert_org[1],$vert_org[2]>>;\n\n\n                    float $u[] = `pointPosition -w $vertsSelection[1]`; \n                    vector $U = <<$u[0],$u[1],$u[2]>>;\n\n\n                    $U = $U - $O;\n\n\n                    float $v[] = `pointPosition -w $vertsSelection[2]`; \n                    vector $V = <<$v[0],$v[1],$v[2]>>;\n\n\n                    $V = $V - $O;\n\n\n                    float $angleSum = rad_to_deg(`angle $U $V`);    // final angle calculation\n                    \n                    \n                    // round the number\n                    // decimals taking into account to round the number. \n                    int $n = 2;\n                    float $roundAngle = pow(10, $n);\n\n\n                    int $calc_1 = ($angleSum * $roundAngle + 0.5);\n                    float $calc_2 = $calc_1 / $roundAngle;               \n                    \n                    \n                    // print it into the field\n                    textField  -e -tx ($calc_2 + \" ?\") angleFiled;    \n                } \n                else \n                {\n                   warning -n  \" -- INFO -- Select 3 vertices to get the angle! \"; \n                   return;   \n                }  \n            }\n            \n            // If Shift+LMB on the button - convert as 360 degree angle\n            if ($chkModifierPress == 1)\n            {\n                string $angleValueGet;\n                $angleValueGet = `textField -q -tx angleFiled`;\n                \n                int $sAngle = `size $angleValueGet`;\n                if ($sAngle == 0)\n                {\n                   warning -n  \" -- INFO -- Measure the angle first (LMB+click on button) between 3 vertice then use this option to convert the value! \"; \n                   setFocus UnitConvert;\n                   return;   \n                }\n                if ($sAngle >= 2)\n                {\n                   string $filedValue[];\n                   $numTokensTempA = `tokenize $angleValueGet \" ?\" $filedValue`;\n                   float $filterNumbersOnly = $filedValue[0];\n                   float $toFullAngle = 360 - $filterNumbersOnly;\n                   \n                   textField -e -tx ($toFullAngle + \" ?\") angleFiled; \n                }\n            }\n \n    setFocus UnitConvert;\n}      \n    \n// Units Convert - layout switching ---------------------------------------------------------------------------------------------------------------------------\nproc mmLayout()\n{\n        // inch > milimeter\n            floatField -e -v 0 -cc \"inputInchesMilli();\" inchesInput;\n            text -e -l \"Millimeter  \" labelMeter1;\n            floatField -e -v 0 -cc \"inputMilliInches();\" meter1Input;\n        // feet > milimeter\n            floatField -e -v 0 -cc \"inputFeetMilli();\" feetInput;\n            text -e -l \"Millimeter  \" labelMeter2;\n            floatField -e -v 0 -cc \"inputMilliFeet();\" meter2Input;  \n        // yard > milimeter\n            floatField -e -v 0 -cc \"inputYardsMilli();\" yardsInput;\n            text -e -l \"Millimeter  \" labelMeter3;\n            floatField -e -v 0 -cc \"inputMilliYards();\" meter3Input;\n      \n\n\n        formLayout -e \n             -attachForm labelMeter1 \"top\" 37   -attachForm labelMeter1 \"left\" 150 \n             -attachForm labelMeter2 \"top\" 62   -attachForm labelMeter2 \"left\" 150\n             -attachForm labelMeter3 \"top\" 88   -attachForm labelMeter3 \"left\" 150   \n        unitConvertUI; \n     \n}\n\n\nproc cmLayout()\n{\n        // inch > centi\n            floatField -e -v 0 -cc \"inputInchesCenti();\" inchesInput;\n            text -e -l \"Centimeter  \" labelMeter1;\n            floatField -e -v 0 -cc \"inputCentiInches();\" meter1Input;\n        // feet > centi\n            floatField -e -v 0 -cc \"inputFeetCenti();\" feetInput;\n            text -e -l \"Centimeter  \" labelMeter2;\n            floatField -e -v 0 -cc \"inputCentiFeet();\" meter2Input;  \n        // yard > centi\n            floatField -e -v 0 -cc \"inputYardsCenti();\" yardsInput;\n            text -e -l \"Centimeter  \" labelMeter3;\n            floatField -e -v 0 -cc \"inputCentiYards();\" meter3Input;\n      \n\n\n        formLayout -e \n             -attachForm labelMeter1 \"top\" 37   -attachForm labelMeter1 \"left\" 145 \n             -attachForm labelMeter2 \"top\" 62   -attachForm labelMeter2 \"left\" 145\n             -attachForm labelMeter3 \"top\" 88   -attachForm labelMeter3 \"left\" 145   \n        unitConvertUI; \n \n}\n\n\n\nproc mLayout()\n{\n     \n        // inch > meter\n            floatField -e -v 0 -cc \"inputInchesMeter();\" inchesInput;\n            text -e -l \"Meter  \" labelMeter1;\n            floatField -e -v 0 -cc \"inputMeterInches();\" meter1Input;\n        // feet > meter\n            floatField -e -v 0 -cc \"inputFeetMeter();\" feetInput;\n            text -e -l \"Meter  \" labelMeter2;\n            floatField -e -v 0 -cc \"inputMeterFeet();\" meter2Input;  \n        // yard > meter\n            floatField -e -v 0 -cc \"inputYardsMeter();\" yardsInput;\n            text -e -l \"Meter  \" labelMeter3;\n            floatField -e -v 0 -cc \"inputMeterYards();\" meter3Input;\n      \n\n\n        formLayout -e \n             -attachForm labelMeter1 \"top\" 37   -attachForm labelMeter1 \"left\" 171 \n             -attachForm labelMeter2 \"top\" 62   -attachForm labelMeter2 \"left\" 171\n             -attachForm labelMeter3 \"top\" 88   -attachForm labelMeter3 \"left\" 171   \n        unitConvertUI; \n   \n}\n\n\n\n// Toggle Unit Conver layout\nproc toggleUnitConverUI()\n{\n    int $MTunitToggle2 = `optionVar -q \"MTconvertUnitsToggle\"`;\n    if ($MTunitToggle2 == 0 )\n    {\n        iconTextButton -e -image1 \"MeasureTools_icons/K_MeasureTool_unitsToggle_on.png\" toggleUnitConcButton;\n        optionVar -iv \"MTconvertUnitsToggle\" 1;\n        \n        // Create Unit Conver layout\n        formLayout -h 118 -w 284 -numberOfDivisions 100 -parent unitConvert_attach_UI unitConvertUI; \n        text -label \"\" -al \"left\" -h 116 -w 286 -backgroundColor 0.25 0.25 0.25 bkgUnitsConvert;\n              iconTextRadioCollection itRadCollect;    \n                iconTextRadioButton -st \"iconOnly\" -w 46 -h 14 -mw 0 -mh 0 -i1 \"MeasureTools_icons/K_MeasureTool_mm.png\" -onc \"mmLayout();\"  orientXplus;         \n                iconTextRadioButton -st \"iconOnly\" -w 46 -h 14 -mw 0 -mh 0 -i1 \"MeasureTools_icons/K_MeasureTool_cm.png\" -onc \"cmLayout();\" orientXplus2;         \n                iconTextRadioButton -sl -st \"iconOnly\" -w 46 -h 14 -mw 0 -mh 0 -i1 \"MeasureTools_icons/K_MeasureTool_m.png\" -onc \"mLayout();\" orientXplus3;    \n           \n                // inch > meter\n                    text -l \" Inches  \" labelInches;\n                    floatField -pre 3 -w 70  -cc \"inputInchesMeter();\" inchesInput;\n                    text -l \"  =  \" labelEqual1;\n                    text -l \"Meter  \" labelMeter1;\n                    floatField -pre 3 -w 70 -cc \"inputMeterInches();\" meter1Input;\n                // feet > meter\n                    text -l \" Feet  \" labelFeet;\n                    floatField -pre 3 -w 70  -cc \"inputFeetMeter();\" feetInput;\n                    text -l \"  =  \" labelEqual2;\n                    text -l \"Meter  \" labelMeter2;\n                    floatField -pre 3 -w 70 -cc \"inputMeterFeet();\" meter2Input;  \n                // yard > meter\n                    text -l \"Yards  \" labelYards;\n                    floatField -pre 3 -w 70  -cc \"inputYardsMeter();\" yardsInput;\n                    text -l \"  =  \" labelEqual3;\n                    text -l \"Meter  \" labelMeter3;\n                    floatField -pre 3 -w 70 -cc \"inputMeterYards();\" meter3Input;                  \n           \n           formLayout -edit\n             -attachForm bkgUnitsConvert \"top\" 0   -attachForm bkgUnitsConvert \"left\" 1\n             -attachForm orientXplus \"top\" 8   -attachForm orientXplus \"left\" 128\n             -attachForm orientXplus2 \"top\" 8  -attachForm orientXplus2 \"left\" 178\n             -attachForm orientXplus3 \"top\" 8  -attachForm orientXplus3 \"left\" 228\n                     // inch > meter\n                     -attachForm inchesInput \"top\" 34  -attachForm inchesInput \"left\" 50\n                     -attachForm labelInches \"top\" 37  -attachForm labelInches \"left\" 8\n                     -attachForm labelEqual1 \"top\" 37   -attachForm labelEqual1 \"left\" 125\n                     -attachForm labelMeter1 \"top\" 37   -attachForm labelMeter1 \"left\" 171\n                     -attachForm meter1Input \"top\" 34  -attachForm meter1Input \"left\" 205\n                     // feet > meter\n                     -attachForm feetInput \"top\" 59    -attachForm feetInput \"left\" 50 \n                     -attachForm labelFeet \"top\" 62    -attachForm labelFeet \"left\" 19\n                     -attachForm labelEqual2 \"top\" 62   -attachForm labelEqual2 \"left\" 125\n                     -attachForm labelMeter2 \"top\" 62   -attachForm labelMeter2 \"left\" 171\n                     -attachForm meter2Input \"top\" 59  -attachForm meter2Input \"left\" 205                     \n                     // yard > meter\n                     -attachForm yardsInput \"top\" 85   -attachForm yardsInput \"left\" 50\n                     -attachForm labelYards \"top\" 88   -attachForm labelYards \"left\" 19\n                     -attachForm labelEqual3 \"top\" 88   -attachForm labelEqual3 \"left\" 125\n                     -attachForm labelMeter3 \"top\" 88   -attachForm labelMeter3 \"left\" 171\n                     -attachForm meter3Input \"top\" 85  -attachForm meter3Input \"left\" 205   \n                    \n             unitConvertUI; \n             setParent ..;\n        \n    }\n    \n    if ($MTunitToggle2 == 1 )\n    {\n        iconTextButton -e -image1 \"MeasureTools_icons/K_MeasureTool_unitsToggle_off.png\" toggleUnitConcButton;\n        optionVar -iv \"MTconvertUnitsToggle\" 0;\n        \n        // delete unitConvertUI layout ( close tab for Unit Conversions )\n        deleteUI -layout unitConvertUI;\n        //columnLayout -e -w 292 unitConvert_attach_UI;\n        window -e -h 134 UnitConvert;\n\n\n    }  \n}\n\n\n\n// Icon switch for Constrain axis\nproc changeIconsAll()\n{\n    iconTextRadioButton -e -i1 \"MeasureTools_icons/K_MeasureTool_axisAll_On.png\" axisConstAll;     \n    iconTextRadioButton -e -i1 \"MeasureTools_icons/K_MeasureTool_axisX_Off.png\" axisConstX;         \n    iconTextRadioButton -e -i1 \"MeasureTools_icons/K_MeasureTool_axisY_Off.png\" axisConstY; \n    iconTextRadioButton -e -i1 \"MeasureTools_icons/K_MeasureTool_axisZ_Off.png\" axisConstZ;     \n}\nproc changeIconsX()\n{\n    iconTextRadioButton -e -i1 \"MeasureTools_icons/K_MeasureTool_axisAll_Off.png\" axisConstAll;     \n    iconTextRadioButton -e -i1 \"MeasureTools_icons/K_MeasureTool_axisX_On.png\" axisConstX;         \n    iconTextRadioButton -e -i1 \"MeasureTools_icons/K_MeasureTool_axisY_Off.png\" axisConstY; \n    iconTextRadioButton -e -i1 \"MeasureTools_icons/K_MeasureTool_axisZ_Off.png\" axisConstZ;     \n} \nproc changeIconsY()\n{\n    iconTextRadioButton -e -i1 \"MeasureTools_icons/K_MeasureTool_axisAll_Off.png\" axisConstAll;     \n    iconTextRadioButton -e -i1 \"MeasureTools_icons/K_MeasureTool_axisX_Off.png\" axisConstX;         \n    iconTextRadioButton -e -i1 \"MeasureTools_icons/K_MeasureTool_axisY_On.png\" axisConstY; \n    iconTextRadioButton -e -i1 \"MeasureTools_icons/K_MeasureTool_axisZ_Off.png\" axisConstZ;     \n}  \nproc changeIconsZ()\n{\n    iconTextRadioButton -e -i1 \"MeasureTools_icons/K_MeasureTool_axisAll_Off.png\" axisConstAll;     \n    iconTextRadioButton -e -i1 \"MeasureTools_icons/K_MeasureTool_axisX_Off.png\" axisConstX;         \n    iconTextRadioButton -e -i1 \"MeasureTools_icons/K_MeasureTool_axisY_Off.png\" axisConstY; \n    iconTextRadioButton -e -i1 \"MeasureTools_icons/K_MeasureTool_axisZ_On.png\" axisConstZ;     \n}  \n\n\n\n\n\n// Help  ----------------------------------------------------------------------------------------------------------------------------------\nproc getTutsOverviewV2_0()\n{\n   launch -web \"https://youtu.be/R4SrHFa6Hto\";\n}\n\n\nproc scriptsGumroad()\n{\n   launch -web \"http://gumroad.com/klaudio2u\";\n}\n\n\nproc webFacebook()\n{\n   launch -web \"http://facebook.com/klaudio.ladavac\";\n}\nproc webArtStation()\n{\n   launch -web \"http://artstation.com/klaudio2u\";\n}" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Josh Sobel Attr Tools" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "'''\n\njsConnectAttrs\n\n'''\n\nimport maya.cmds as mc\nimport sys as s..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "JSattrs" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "'''\n\njsConnectAttrs\n\n'''\n\nimport maya.cmds as mc\nimport sys as sys\nimport ast as ast\n\ndef jsCA_driverTrans():\n    \n    getDriverTrans = mc.ls (sl = True)\n    length = len (getDriverTrans)\n    \n    if length == 0:\n        mc.textField (jsCA_getDriverTrans_TF, e = True, text = 'object, object, object...')\n        mc.warning ('Selection cannot be zero')\n    \n    else:    \n        getDriverTransStr = str(getDriverTrans)\n        getDriverTransStr = getDriverTransStr.replace (\"u'\", \"\")\n        getDriverTransStr = getDriverTransStr.replace (\"[\", \"\")\n        getDriverTransStr = getDriverTransStr.replace (\"]\", \"\")\n        getDriverTransStr = getDriverTransStr.replace (\"'\", \"\")\n        getDriverTransStr = getDriverTransStr.replace (\"[\", \"\")\n        mc.textField (jsCA_getDriverTrans_TF, e = True, text = getDriverTransStr)\n        \n        sys.stdout.write ('Enabled zig-zag connect mode. Make sure number of driver and driven objects are the same.')\n\ndef jsCA_drivenTrans():\n        \n    getDrivenTrans = mc.ls (sl = True)\n    length = len (getDrivenTrans)\n    \n    if length == 0:\n        mc.textField (jsCA_getDrivenTrans_TF, e = True, text = 'object, object, object...')\n        mc.warning ('Selection cannot be zero')\n    \n    else:\n        getDrivenTransStr = str(getDrivenTrans)\n        getDrivenTransStr = getDrivenTransStr.replace (\"u'\", \"\")\n        getDrivenTransStr = getDrivenTransStr.replace (\"[\", \"\")\n        getDrivenTransStr = getDrivenTransStr.replace (\"]\", \"\")\n        getDrivenTransStr = getDrivenTransStr.replace (\"'\", \"\")\n        getDrivenTransStr = getDrivenTransStr.replace (\"[\", \"\")\n        mc.textField (jsCA_getDrivenTrans_TF, e = True, text = getDrivenTransStr)    \n        \ndef jsCA_driverAttrs():\n    \n    getDriverAttrs = mc.channelBox ('mainChannelBox', q=True, sma=True)\n    if getDriverAttrs is None:\n        length = None\n    else:\n        length = len (getDriverAttrs)\n    \n    if length == 0 or length is None:\n        mc.textField (jsCA_getDriverAttrs_TF, e = True, text = 'attr')\n        mc.warning ('Selection must be 1')\n    \n    elif length > 1:\n        mc.warning ('Selection must be 1')\n    \n    else:\n        \n        getDriverAttrsStr = str (getDriverAttrs)\n        getDriverAttrsStr = getDriverAttrsStr.replace (\"u'\", \"\")\n        getDriverAttrsStr = getDriverAttrsStr.replace (\"[\", \"\")\n        getDriverAttrsStr = getDriverAttrsStr.replace (\"]\", \"\")\n        getDriverAttrsStr = getDriverAttrsStr.replace (\"'\", \"\")\n        getDriverAttrsStr = getDriverAttrsStr.replace (\"[\", \"\")\n        mc.textField (jsCA_getDriverAttrs_TF, e = True, text = getDriverAttrsStr)\n        \ndef jsCA_drivenAttrs():\n    \n    getDrivenAttrs = mc.channelBox ('mainChannelBox', q=True, sma=True)\n    if getDrivenAttrs is None:\n        length = None\n    else:\n        length = len (getDrivenAttrs)\n    \n    if length == 0 or length == None:\n        mc.textField (jsCA_getDrivenAttrs_TF, e = True, text = 'attr, attr, attr...')\n        mc.warning ('Selection cannot be zero')\n    \n    else:\n        \n        getDrivenAttrsStr = str (getDrivenAttrs)\n        getDrivenAttrsStr = getDrivenAttrsStr.replace (\"u'\", \"\")\n        getDrivenAttrsStr = getDrivenAttrsStr.replace (\"[\", \"\")\n        getDrivenAttrsStr = getDrivenAttrsStr.replace (\"]\", \"\")\n        getDrivenAttrsStr = getDrivenAttrsStr.replace (\"'\", \"\")\n        getDrivenAttrsStr = getDrivenAttrsStr.replace (\"[\", \"\")\n        mc.textField (jsCA_getDrivenAttrs_TF, e = True, text = getDrivenAttrsStr)\n\ndef jsCA_pickQDriver():\n    \n    getQDriverObj = mc.ls (sl = True)\n    getQDriverAttrs = mc.channelBox ('mainChannelBox', q=True, sma=True)\n    if getQDriverAttrs is None:\n        length = None\n    else:\n        length = len (getQDriverAttrs)\n        getQDriverObj = getQDriverObj[0]\n    \n    \n    \n    if length == 0 or length is None:\n        mc.textField (jsCA_getQDriver_TF, e = True, text = 'object.attr')\n        mc.warning ('Selection must be 1')\n    \n    else:\n        \n        getQDriverAttrsStr = str (getQDriverAttrs)\n        getQDriverAttrsStr = getQDriverAttrsStr.replace (\"u'\", \"\")\n        getQDriverAttrsStr = getQDriverAttrsStr.replace (\"[\", \"\")\n        getQDriverAttrsStr = getQDriverAttrsStr.replace (\"]\", \"\")\n        getQDriverAttrsStr = getQDriverAttrsStr.replace (\"'\", \"\")\n        getQDriverAttrsStr = getQDriverAttrsStr.replace (\"[\", \"\")\n        getQDriverAttrsStr = '%s.%s' %(getQDriverObj, getQDriverAttrsStr)\n        mc.textField (jsCA_getQDriver_TF, e = True, text = getQDriverAttrsStr)\n\ndef jsCA_pickQDriven():\n    \n    getQDrivenObj = mc.ls (sl = True)\n    getQDrivenAttrs = mc.channelBox ('mainChannelBox', q=True, sma=True)\n    if getQDrivenAttrs is None:\n        length = None\n    else:\n        length = len (getQDrivenAttrs)\n        getQDrivenObj = getQDrivenObj[0]\n    \n    if length == 0 or length is None:\n        mc.textField (jsCA_getQDriven_TF, e = True, text = 'object.attr, attr, attr...')\n        mc.warning ('Selection must be 1')\n    \n    else:\n        \n        getQDrivenAttrsStr = str (getQDrivenAttrs)\n        getQDrivenAttrsStr = getQDrivenAttrsStr.replace (\"u'\", \"\")\n        getQDrivenAttrsStr = getQDrivenAttrsStr.replace (\"[\", \"\")\n        getQDrivenAttrsStr = getQDrivenAttrsStr.replace (\"]\", \"\")\n        getQDrivenAttrsStr = getQDrivenAttrsStr.replace (\"'\", \"\")\n        getQDrivenAttrsStr = getQDrivenAttrsStr.replace (\"[\", \"\")\n        getQDrivenAttrsStr = '%s.%s' %(getQDrivenObj, getQDrivenAttrsStr)\n        mc.textField (jsCA_getQDriven_TF, e = True, text = getQDrivenAttrsStr)\n\ndef jsCA_QC():\n    \n    jsCA_QDriver_TF_q = mc.textField (jsCA_getQDriver_TF, q = True, tx = True)\n    jsCA_QDriven_TF_q = mc.textField (jsCA_getQDriven_TF, q = True, tx = True)\n    \n    if 'object.' in jsCA_QDriver_TF_q or 'object.' in jsCA_QDriven_TF_q:\n        \n        mc.warning ('Please fill both fields.')\n        pass\n    \n    else:\n    \n        jsCA_strList = str(jsCA_QDriven_TF_q)\n        split_excludeFirst = jsCA_strList.split ('.')\n        excludeFirst = jsCA_strList.replace (split_excludeFirst[0], '')\n        excludeFirst = excludeFirst.replace ('.', '')\n        \n        jsCA_qAttrs = \"['%s']\" %excludeFirst\n        jsCA_qAttrs = jsCA_qAttrs.replace (\", \", \"', '\")\n        jsCA_qAttrs = ast.literal_eval(jsCA_qAttrs)\n        \n        for attr in jsCA_qAttrs:\n            \n            mc.connectAttr (jsCA_QDriver_TF_q, '%s.%s' %(split_excludeFirst[0], attr))\n    \ndef jsCA_execute():\n    \n    getDriverTrans = mc.textField (jsCA_getDriverTrans_TF, q = True, text = True)\n    getDriverTrans = \"['%s']\" %getDriverTrans\n    getDriverTrans = getDriverTrans.replace (\", \", \"', '\")\n    getDriverTrans = ast.literal_eval(getDriverTrans)\n    \n    getDrivenTrans = mc.textField (jsCA_getDrivenTrans_TF, q = True, text = True)\n    getDrivenTrans = \"['%s']\" %getDrivenTrans\n    getDrivenTrans = getDrivenTrans.replace (\", \", \"', '\")\n    getDrivenTrans = ast.literal_eval(getDrivenTrans)\n    \n    getDriverAttrs = mc.textField (jsCA_getDriverAttrs_TF, q = True, text = True)\n    getDriverAttrs = \"['%s']\" %getDriverAttrs\n    getDriverAttrs = getDriverAttrs.replace (\", \", \"', '\")\n    getDriverAttrs = ast.literal_eval(getDriverAttrs)\n    \n    getDrivenAttrs = mc.textField (jsCA_getDrivenAttrs_TF, q = True, text = True)\n    getDrivenAttrs = \"['%s']\" %getDrivenAttrs\n    getDrivenAttrs = getDrivenAttrs.replace (\", \", \"', '\")\n    getDrivenAttrs = ast.literal_eval(getDrivenAttrs)\n    \n    len_driverTrans = len(getDriverTrans)\n    len_drivenTrans = len(getDrivenTrans)\n    len_driverAttrs = len(getDriverAttrs)\n    len_drivenAttrs = len(getDrivenAttrs)\n    \n    if 'object, object, object...' in getDriverTrans or 'object, object, object...' in getDrivenTrans or 'attr' in getDriverAttrs or 'attr, attr, attr...' in getDrivenAttrs:\n        \n        mc.warning ('Please fill all fields.')\n        pass\n    \n    else:\n        \n        if len_driverTrans == 1 and len_drivenTrans == 1:\n            \n            for attr in getDrivenAttrs:\n                lock = mc.getAttr ('%s.%s' %(getDrivenTrans[0], attr), l = True)\n                if lock == False:\n                    mc.connectAttr ('%s.%s' %(getDriverTrans[0], getDriverAttrs[0]), '%s.%s' %(getDrivenTrans[0], attr))\n        \n        elif len_driverTrans > 1 and len_driverTrans == len_drivenTrans:\n            \n            count = 0\n            \n            for obj in getDrivenTrans:\n                               \n                for attr in getDrivenAttrs:\n                    \n                    if count <= len_driverTrans - 1:\n                        \n                        lock = mc.getAttr ('%s.%s' %(obj, attr), l = True)\n                        if lock == False:\n                            print count\n                            mc.connectAttr ('%s.%s' %(getDriverTrans[count], getDriverAttrs[0]), '%s.%s' %(obj, attr))\n                            \n                count = count + 1\n                            \n                        #if count == len_driverTrans - 1:\n                            \n        elif len_driverTrans > 1 and len_drivenTrans < len_driverTrans:\n            \n            mc.warning ('Driver count must be either 1 or match driven count')\n        \n        elif len_driverTrans == 1 and len_drivenTrans > 1:\n            \n            for obj in getDrivenTrans:\n                               \n                for attr in getDrivenAttrs:\n                    \n                    lock = mc.getAttr ('%s.%s' %(obj, attr), l = True)\n                    if lock == False:\n                        mc.connectAttr ('%s.%s' %(getDriverTrans[0], getDriverAttrs[0]), '%s.%s' %(obj, attr))\n            \n            \n            \ndef jsCA_t():\n                            \n    getDriverTrans = mc.textField (jsCA_getDriverTrans_TF, q = True, text = True)\n    getDriverTrans = \"['%s']\" %getDriverTrans\n    getDriverTrans = getDriverTrans.replace (\", \", \"', '\")\n    getDriverTrans = ast.literal_eval(getDriverTrans)\n    print getDriverTrans[0]\n    \n    getDrivenTrans = mc.textField (jsCA_getDrivenTrans_TF, q = True, text = True)\n    getDrivenTrans = \"['%s']\" %getDrivenTrans\n    getDrivenTrans = getDrivenTrans.replace (\", \", \"', '\")\n    getDrivenTrans = ast.literal_eval(getDrivenTrans)\n    print getDrivenTrans[0]\n    \n    getDriverAttrs = mc.textField (jsCA_getDriverAttrs_TF, q = True, text = True)\n    getDriverAttrs = \"['%s']\" %getDriverAttrs\n    getDriverAttrs = getDriverAttrs.replace (\", \", \"', '\")\n    getDriverAttrs = ast.literal_eval(getDriverAttrs)\n    print getDriverAttrs[0]\n    \n    getDrivenAttrs = mc.textField (jsCA_getDrivenAttrs_TF, q = True, text = True)\n    getDrivenAttrs = \"['%s']\" %getDrivenAttrs\n    getDrivenAttrs = getDrivenAttrs.replace (\", \", \"', '\")\n    getDrivenAttrs = ast.literal_eval(getDrivenAttrs)\n    print getDrivenAttrs[0]\n    \n    len_driverTrans = len(getDriverTrans)\n    len_drivenTrans = len(getDrivenTrans)\n    len_driverAttrs = len(getDriverAttrs)\n    len_drivenAttrs = len(getDrivenAttrs)\n    \n    if 'object' != getDriverTrans[0] and 'object' != getDrivenTrans or getDriverTrans is None or getDrivenTrans is None:\n    \n        if len_driverTrans == 1:\n                \n            for obj in getDrivenTrans:\n                lock = mc.getAttr ('%s.tx' %obj, l = True)\n                if lock == False:\n                    mc.connectAttr ('%s.tx' %getDriverTrans[0], '%s.tx' %obj)\n                lock = mc.getAttr ('%s.ty' %obj, l = True)\n                if lock == False:\n                    mc.connectAttr ('%s.ty' %getDriverTrans[0], '%s.ty' %obj)\n                lock = mc.getAttr ('%s.tz' %obj, l = True)\n                if lock == False:\n                    mc.connectAttr ('%s.tz' %getDriverTrans[0], '%s.tz' %obj)\n        \n        elif len_driverTrans > 1 and len_driverTrans == len_drivenTrans:\n            \n            count = 0\n            \n            for obj in getDrivenTrans:\n                \n                if count <= len_driverTrans - 1:\n                    lock = mc.getAttr ('%s.tx' %obj, l = True)\n                    if lock == False:\n                        mc.connectAttr ('%s.tx' %getDriverTrans[count], '%s.tx' %obj)\n                    lock = mc.getAttr ('%s.ty' %obj, l = True)\n                    if lock == False:\n                        mc.connectAttr ('%s.ty' %getDriverTrans[count], '%s.ty' %obj)\n                    lock = mc.getAttr ('%s.tz' %obj, l = True)\n                    if lock == False:\n                        mc.connectAttr ('%s.tz' %getDriverTrans[count], '%s.tz' %obj)\n                    \n                    count = count + 1\n                            \n        elif len_driverTrans > 1 and len_driverTrans != len_drivenTrans:\n            \n            mc.warning ('Driver count must be either 1 or match driven count')\n    else:\n        mc.warning ('Please fill driver and driven object fields.')\n\ndef jsCA_r():\n                            \n    getDriverTrans = mc.textField (jsCA_getDriverTrans_TF, q = True, text = True)\n    getDriverTrans = \"['%s']\" %getDriverTrans\n    getDriverTrans = getDriverTrans.replace (\", \", \"', '\")\n    getDriverTrans = ast.literal_eval(getDriverTrans)\n    print getDriverTrans[0]\n    \n    getDrivenTrans = mc.textField (jsCA_getDrivenTrans_TF, q = True, text = True)\n    getDrivenTrans = \"['%s']\" %getDrivenTrans\n    getDrivenTrans = getDrivenTrans.replace (\", \", \"', '\")\n    getDrivenTrans = ast.literal_eval(getDrivenTrans)\n    print getDrivenTrans[0]\n    \n    getDriverAttrs = mc.textField (jsCA_getDriverAttrs_TF, q = True, text = True)\n    getDriverAttrs = \"['%s']\" %getDriverAttrs\n    getDriverAttrs = getDriverAttrs.replace (\", \", \"', '\")\n    getDriverAttrs = ast.literal_eval(getDriverAttrs)\n    print getDriverAttrs[0]\n    \n    getDrivenAttrs = mc.textField (jsCA_getDrivenAttrs_TF, q = True, text = True)\n    getDrivenAttrs = \"['%s']\" %getDrivenAttrs\n    getDrivenAttrs = getDrivenAttrs.replace (\", \", \"', '\")\n    getDrivenAttrs = ast.literal_eval(getDrivenAttrs)\n    print getDrivenAttrs[0]\n    \n    len_driverTrans = len(getDriverTrans)\n    len_drivenTrans = len(getDrivenTrans)\n    len_driverAttrs = len(getDriverAttrs)\n    len_drivenAttrs = len(getDrivenAttrs)\n    \n    if 'object' != getDriverTrans[0] and 'object' != getDrivenTrans or getDriverTrans is None or getDrivenTrans is None:\n    \n        if len_driverTrans == 1:\n                \n            for obj in getDrivenTrans:\n                lock = mc.getAttr ('%s.rx' %obj, l = True)\n                if lock == False:\n                    mc.connectAttr ('%s.rx' %getDriverTrans[0], '%s.rx' %obj)\n                lock = mc.getAttr ('%s.ry' %obj, l = True)\n                if lock == False:\n                    mc.connectAttr ('%s.ry' %getDriverTrans[0], '%s.ry' %obj)\n                lock = mc.getAttr ('%s.rz' %obj, l = True)\n                if lock == False:\n                    mc.connectAttr ('%s.rz' %getDriverTrans[0], '%s.rz' %obj)\n        \n        elif len_driverTrans > 1 and len_driverTrans == len_drivenTrans:\n            \n            count = 0\n            \n            for obj in getDrivenTrans:\n                \n                if count <= len_driverTrans - 1:\n                    lock = mc.getAttr ('%s.rx' %obj, l = True)\n                    if lock == False:\n                        mc.connectAttr ('%s.rx' %getDriverTrans[count], '%s.rx' %obj)\n                    lock = mc.getAttr ('%s.ry' %obj, l = True)\n                    if lock == False:\n                        mc.connectAttr ('%s.ry' %getDriverTrans[count], '%s.ry' %obj)\n                    lock = mc.getAttr ('%s.rz' %obj, l = True)\n                    if lock == False:\n                        mc.connectAttr ('%s.rz' %getDriverTrans[count], '%s.rz' %obj)\n                    \n                    count = count + 1\n                            \n        elif len_driverTrans > 1 and len_driverTrans != len_drivenTrans:\n            \n            mc.warning ('Driver count must be either 1 or match driven count')\n            \n    else:\n        mc.warning ('Please fill driver and driven object fields.')\n\ndef jsCA_s():\n                            \n    getDriverTrans = mc.textField (jsCA_getDriverTrans_TF, q = True, text = True)\n    getDriverTrans = \"['%s']\" %getDriverTrans\n    getDriverTrans = getDriverTrans.replace (\", \", \"', '\")\n    getDriverTrans = ast.literal_eval(getDriverTrans)\n    print getDriverTrans[0]\n    \n    getDrivenTrans = mc.textField (jsCA_getDrivenTrans_TF, q = True, text = True)\n    getDrivenTrans = \"['%s']\" %getDrivenTrans\n    getDrivenTrans = getDrivenTrans.replace (\", \", \"', '\")\n    getDrivenTrans = ast.literal_eval(getDrivenTrans)\n    print getDrivenTrans[0]\n    \n    getDriverAttrs = mc.textField (jsCA_getDriverAttrs_TF, q = True, text = True)\n    getDriverAttrs = \"['%s']\" %getDriverAttrs\n    getDriverAttrs = getDriverAttrs.replace (\", \", \"', '\")\n    getDriverAttrs = ast.literal_eval(getDriverAttrs)\n    print getDriverAttrs[0]\n    \n    getDrivenAttrs = mc.textField (jsCA_getDrivenAttrs_TF, q = True, text = True)\n    getDrivenAttrs = \"['%s']\" %getDrivenAttrs\n    getDrivenAttrs = getDrivenAttrs.replace (\", \", \"', '\")\n    getDrivenAttrs = ast.literal_eval(getDrivenAttrs)\n    print getDrivenAttrs[0]\n    \n    len_driverTrans = len(getDriverTrans)\n    len_drivenTrans = len(getDrivenTrans)\n    len_driverAttrs = len(getDriverAttrs)\n    len_drivenAttrs = len(getDrivenAttrs)\n    \n    if 'object' != getDriverTrans[0] and 'object' != getDrivenTrans or getDriverTrans is None or getDrivenTrans is None:\n        \n        if len_driverTrans == 1:\n                \n            for obj in getDrivenTrans:\n                lock = mc.getAttr ('%s.sx' %obj, l = True)\n                if lock == False:\n                    mc.connectAttr ('%s.sx' %getDriverTrans[0], '%s.sx' %obj)\n                lock = mc.getAttr ('%s.sy' %obj, l = True)\n                if lock == False:\n                    mc.connectAttr ('%s.sy' %getDriverTrans[0], '%s.sy' %obj)\n                lock = mc.getAttr ('%s.sz' %obj, l = True)\n                if lock == False:\n                    mc.connectAttr ('%s.sz' %getDriverTrans[0], '%s.sz' %obj)\n        \n        elif len_driverTrans > 1 and len_driverTrans == len_drivenTrans:\n            \n            count = 0\n            \n            for obj in getDrivenTrans:\n                \n                if count <= len_driverTrans - 1:\n                    lock = mc.getAttr ('%s.sx' %obj, l = True)\n                    if lock == False:\n                        mc.connectAttr ('%s.sx' %getDriverTrans[count], '%s.sx' %obj)\n                    lock = mc.getAttr ('%s.sy' %obj, l = True)\n                    if lock == False:\n                        mc.connectAttr ('%s.sy' %getDriverTrans[count], '%s.sy' %obj)\n                    lock = mc.getAttr ('%s.sz' %obj, l = True)\n                    if lock == False:\n                        mc.connectAttr ('%s.sz' %getDriverTrans[count], '%s.sz' %obj)\n                    \n                    count = count + 1\n                            \n        elif len_driverTrans > 1 and len_driverTrans != len_drivenTrans:\n            \n            mc.warning ('Driver count must be either 1 or match driven count')\n            \n    else:\n        mc.warning ('Please fill driver and driven object fields.')\n        \ndef jsCA_all():\n                            \n    getDriverTrans = mc.textField (jsCA_getDriverTrans_TF, q = True, text = True)\n    getDriverTrans = \"['%s']\" %getDriverTrans\n    getDriverTrans = getDriverTrans.replace (\", \", \"', '\")\n    getDriverTrans = ast.literal_eval(getDriverTrans)\n    print getDriverTrans[0]\n    \n    getDrivenTrans = mc.textField (jsCA_getDrivenTrans_TF, q = True, text = True)\n    getDrivenTrans = \"['%s']\" %getDrivenTrans\n    getDrivenTrans = getDrivenTrans.replace (\", \", \"', '\")\n    getDrivenTrans = ast.literal_eval(getDrivenTrans)\n    print getDrivenTrans[0]\n    \n    getDriverAttrs = mc.textField (jsCA_getDriverAttrs_TF, q = True, text = True)\n    getDriverAttrs = \"['%s']\" %getDriverAttrs\n    getDriverAttrs = getDriverAttrs.replace (\", \", \"', '\")\n    getDriverAttrs = ast.literal_eval(getDriverAttrs)\n    print getDriverAttrs[0]\n    \n    getDrivenAttrs = mc.textField (jsCA_getDrivenAttrs_TF, q = True, text = True)\n    getDrivenAttrs = \"['%s']\" %getDrivenAttrs\n    getDrivenAttrs = getDrivenAttrs.replace (\", \", \"', '\")\n    getDrivenAttrs = ast.literal_eval(getDrivenAttrs)\n    print getDrivenAttrs[0]\n    \n    len_driverTrans = len(getDriverTrans)\n    len_drivenTrans = len(getDrivenTrans)\n    len_driverAttrs = len(getDriverAttrs)\n    len_drivenAttrs = len(getDrivenAttrs)\n    \n    if 'object' != getDriverTrans[0] and 'object' != getDrivenTrans or getDriverTrans is None or getDrivenTrans is None:\n        \n        if len_driverTrans == 1:\n                \n            for obj in getDrivenTrans:\n                \n                cbCheck = mc.channelBox ('mainChannelBox', q = True, sma = True)\n                if cbCheck:\n                    attrs = cbCheck\n                else:\n                    attrs = mc.listAttr (obj, v = 1, k = 1, l = 0)\n                \n                for attr in attrs:\n                    lock = mc.getAttr ('%s.%s' %(obj,attr), l = True)\n                    if lock == False:\n                        match = mc.objExists ('%s.%s' %(getDriverTrans[0],attr))\n                        print match\n                        if match:\n                            mc.connectAttr ('%s.%s' %(getDriverTrans[0],attr), '%s.%s' %(obj,attr))\n                '''\n                lock = mc.getAttr ('%s.sx' %obj, l = True)\n                if lock == False:\n                    mc.connectAttr ('%s.sx' %getDriverTrans[0], '%s.sx' %obj)\n                lock = mc.getAttr ('%s.sy' %obj, l = True)\n                if lock == False:\n                    mc.connectAttr ('%s.sy' %getDriverTrans[0], '%s.sy' %obj)\n                lock = mc.getAttr ('%s.sz' %obj, l = True)\n                if lock == False:\n                    mc.connectAttr ('%s.sz' %getDriverTrans[0], '%s.sz' %obj)\n                '''\n        \n        elif len_driverTrans > 1 and len_driverTrans == len_drivenTrans:\n            \n            count = 0\n            \n            for obj in getDrivenTrans:\n                \n                cbCheck = mc.channelBox ('mainChannelBox', q = True, sma = True)\n                if cbCheck:\n                    attrs = cbCheck\n                else:\n                    attrs = mc.listAttr (obj, v = 1, k = 1, l = 0)\n                for attr in attrs:\n                    lock = mc.getAttr ('%s.%s' %(obj,attr), l = True)\n                    if lock == False:\n                        match = mc.objExists ('%s.%s' %(getDriverTrans[0],attr))\n                        print match\n                        if match:\n                            mc.connectAttr ('%s.%s' %(getDriverTrans[0],attr), '%s.%s' %(obj,attr))\n                '''\n                if count <= len_driverTrans - 1:\n                    lock = mc.getAttr ('%s.sx' %obj, l = True)\n                    if lock == False:\n                        mc.connectAttr ('%s.sx' %getDriverTrans[count], '%s.sx' %obj)\n                    lock = mc.getAttr ('%s.sy' %obj, l = True)\n                    if lock == False:\n                        mc.connectAttr ('%s.sy' %getDriverTrans[count], '%s.sy' %obj)\n                    lock = mc.getAttr ('%s.sz' %obj, l = True)\n                    if lock == False:\n                        mc.connectAttr ('%s.sz' %getDriverTrans[count], '%s.sz' %obj)\n                    \n                    count = count + 1\n                '''\n                            \n        elif len_driverTrans > 1 and len_driverTrans != len_drivenTrans:\n            \n            mc.warning ('Driver count must be either 1 or match driven count')\n            \n    else:\n        mc.warning ('Please fill driver and driven object fields.')\n\ndef jsCA_driverTransSel():\n    \n    getDriverTrans = mc.textField (jsCA_getDriverTrans_TF, q = True, text = True)\n    if 'object,' not in getDriverTrans:\n        toSel2 = getDriverTrans.replace (\", \", \"', '\")\n        toSel3 = \"'%s'\" %toSel2\n        eval (\"mc.select (%s)\" %toSel3)\n    else:\n        mc.warning ('Nothing to select.')\n    \ndef jsCA_drivenTransSel():\n    \n    getDrivenTrans = mc.textField (jsCA_getDrivenTrans_TF, q = True, text = True)\n    if 'object,' not in getDrivenTrans:\n        toSel2 = getDrivenTrans.replace (\", \", \"', '\")\n        toSel3 = \"'%s'\" %toSel2\n        eval (\"mc.select (%s)\" %toSel3)\n    else:\n        mc.warning ('Nothing to select.')\n    \ndef jsCA_qDriverTransSel():\n    \n    jsCA_QDriver_TF_q = mc.textField (jsCA_getQDriver_TF, q = True, tx = True)\n    if 'object.' not in jsCA_QDriver_TF_q:\n        spl = jsCA_QDriver_TF_q.split ('.')\n        mc.select (spl[0])\n    else:\n        mc.warning ('Nothing to select.')\n    \ndef jsCA_qDrivenTransSel():\n    \n    jsCA_QDriven_TF_q = mc.textField (jsCA_getQDriven_TF, q = True, tx = True)\n    if 'object.' not in jsCA_QDriven_TF_q:\n        spl = jsCA_QDriven_TF_q.split ('.')\n        mc.select (spl[0])\n    else:\n        mc.warning ('Nothing to select.')\n\n# Create UI\n\njsCA_winHide = 'jsCA_createWin'\njsCA_winTitleHide = 'Connect Attributes'\nmc.windowPref (jsCA_winHide, width = 200, height = 200)\n\nif (mc.window (jsCA_winHide, exists = True)):\n    mc.deleteUI (jsCA_winHide)\n\nmc.window (jsCA_winHide, rtf = True, width = 200, height = 200, title = jsCA_winTitleHide, s = True)\nmc.columnLayout (adj = True, rs = 2)\n\nmc.text (' ')\nmc.text ('Normal/Batch Connect', al = 'center', fn = 'boldLabelFont')\nmc.text (' ')\n\nmc.rowColumnLayout (rowSpacing = (2,1), nc = 4)\n\njsCA_getDriverTrans_TF = mc.textField (bgc = (.15,.15,.15), w=200, ed = 1, text = 'object, object, object...')\nmc.button (l = 'Load Driver Object(s)', c = lambda x:jsCA_driverTrans(), w = 132, bgc = (.619,.784,.902))\nmc.text (' ')\nmc.button (l = 'Select', c = lambda x:jsCA_driverTransSel(), w = 50, bgc = (.937,.867,.570))\n\njsCA_getDriverAttrs_TF = mc.textField (bgc = (.15,.15,.15), w=200, ed = 1, text = 'attr')\nmc.button (l = 'Load Driver Attribute', c = lambda x:jsCA_driverAttrs(), bgc = (.619,.784,.902))\nmc.text (' ')\nmc.text ('   -   ')\n\njsCA_getDrivenTrans_TF = mc.textField (bgc = (.15,.15,.15), w=200, ed = 1, text = 'object, object, object...')\nmc.button (l = 'Load Driven Object(s)', c = lambda x:jsCA_drivenTrans(), bgc = (.661,.620,.902))\nmc.text (' ')\nmc.button (l = 'Select', c = lambda x:jsCA_drivenTransSel(), w = 50, bgc = (.937,.867,.570))\n\njsCA_getDrivenAttrs_TF = mc.textField (bgc = (.15,.15,.15), w=200, ed = 1, text = 'attr, attr, attr...')\nmc.button (l = 'Load Driven Attribute(s)', c = lambda x:jsCA_drivenAttrs(), bgc = (.661,.620,.902))\nmc.text (' ')\nmc.text ('   -   ')\n\nmc.setParent ('..')\n\nmc.button (l = 'Connect Loaded Attrs', c = lambda x:jsCA_execute(), bgc = (.635,.882,.605))\nmc.rowColumnLayout (rowSpacing = (2,1), nc = 9)\nmc.button (l = ' Translate ', c = lambda x:jsCA_t(), bgc = (.635,.882,.605))\nmc.text (' ')\nmc.button (l = ' Rotate ', c = lambda x:jsCA_r(), bgc = (.635,.882,.605))\nmc.text (' ')\nmc.button (l = ' Scale ', c = lambda x:jsCA_s(), bgc = (.635,.882,.605))\nmc.text (' ')\nmc.button (l = ' Trans/Rot/Scl ', c = lambda x:(jsCA_t(), jsCA_r(), jsCA_s()), w = 105, bgc = (.635,.882,.605))\nmc.text (' ')\nmc.button (l = ' Channel Box ', c = lambda x:(jsCA_all()), w = 115, bgc = (.635,.882,.605))\nmc.setParent ('..')\n\nmc.text (' ')\nmc.text ('Quick Connect', al = 'center', fn = 'boldLabelFont')\nmc.text (' ')\nmc.rowColumnLayout (rowSpacing = (2,1), nc = 4)\njsCA_getQDriver_TF = mc.textField (bgc = (.15,.15,.15), w=200, ed = 1, text = 'object.attr')\nmc.button (w = 132, l = 'Load Driver + Attr', c = lambda x:jsCA_pickQDriver(), bgc = (.619,.784,.902))\nmc.text (' ')\nmc.button (l = 'Select', c = lambda x:jsCA_qDriverTransSel(), w = 50, bgc = (.937,.867,.570))\njsCA_getQDriven_TF = mc.textField (bgc = (.15,.15,.15), w=200, ed = 1, text = 'object.attr, attr, attr...')\nmc.button (w = 132, l = 'Load Driven + Attr(s)', c = lambda x:jsCA_pickQDriven(), bgc = (.661,.620,.902))\nmc.text (' ')\nmc.button (l = 'Select', c = lambda x:jsCA_qDrivenTransSel(), w = 50, bgc = (.937,.867,.570))\n\nmc.setParent ('..')\n\nmc.button (l = 'Quick Connect', c = lambda x:jsCA_QC(), bgc = (.635,.882,.605))\n\nmc.showWindow (jsCA_winHide)" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;

} 
